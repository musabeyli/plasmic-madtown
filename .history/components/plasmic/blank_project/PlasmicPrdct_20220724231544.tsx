// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wA73ZswqroE6r1m1xaxGJ1
// Component: ctEGS_j_Qt
import React, { useState } from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import MadisonopolyHeaderFinal from "../../MadisonopolyHeaderFinal"; // plasmic-import: zLYGck-fye5/component
import Slider from "react-slick"; // plasmic-import: HOQUyOpClJ/codeComponent
import Select from "../../Select"; // plasmic-import: eL6LYOdI6RC/component
import Select__Option from "../../Select__Option"; // plasmic-import: ioSFR3lRmqr/component
import FooterComponent from "../../FooterComponent"; // plasmic-import: Mfi3gMBJIGb/component
import { GalleriesModel } from "./ecommerce_image_slider/models/Gallery";
import { useScreenVariants as useScreenVariantsabUxTrbG0Cf5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AbUXTrbG0Cf5V/globalVariant
import GalleryDetail from "../../ecommerce_image_slider/components/GalleryDetail";
import { Center, Heading, HStack, Text, VStack } from "@chakra-ui/react";
import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wA73ZswqroE6r1m1xaxGJ1/projectcss
import sty from "./PlasmicPrdct.module.css"; // plasmic-import: ctEGS_j_Qt/css
import ImageGallery from "react-image-gallery";
import "react-image-gallery/styles/css/image-gallery.css";

import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: T3tWtDwVAV/icon
import CheckoutButton from "../../../pages/checkout";
import ImageSlider from "../../ImageSlider.js";
import { SliderData } from "../../SliderData.js";
import { loadStripe } from "@stripe/stripe-js";
import { fetchPostJSON } from "../../../utils/api-helpers";
import getStripe from "../../../utils/get-stripejs";
import { fakeDataItems } from "../../ProductImages";
import {
  FaGrinTears,
  FaComments,
  FaUniversity,
  FaShippingFast,
} from "react-icons/fa";
import InstagramEmbed from "react-instagram-embed";

loadStripe(process.env.NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY || "");

export type PlasmicPrdct__VariantMembers = {};

export type PlasmicPrdct__VariantsArgs = {};
type VariantPropType = keyof PlasmicPrdct__VariantsArgs;
export const PlasmicPrdct__VariantProps = new Array<VariantPropType>();

export type PlasmicPrdct__ArgsType = {};
type ArgPropType = keyof PlasmicPrdct__ArgsType;
export const PlasmicPrdct__ArgProps = new Array<ArgPropType>();

export type PlasmicPrdct__OverridesType = {
  root?: p.Flex<"div">;
  madisonopolyHeaderFinal?: p.Flex<typeof MadisonopolyHeaderFinal>;
  svg?: p.Flex<"svg">;
  columns?: p.Flex<"div">;
  ul?: p.Flex<"ul">;
  select?: p.Flex<typeof Select>;
  footerComponent?: p.Flex<typeof FooterComponent>;
};

export interface DefaultPrdctProps {}

const ballStyle = {
  marginRight: "0.5em",
  marginTop: "50px",
};

function PlasmicPrdct__RenderFunc(props: {
  variants: PlasmicPrdct__VariantsArgs;
  args: PlasmicPrdct__ArgsType;
  overrides: PlasmicPrdct__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsabUxTrbG0Cf5V(),
  });
  const navigateCheckout = (_event) => {
    router.push({
      pathname: "/checkout",
      query: { quantity: "2" },
    });
  };
  const [selectedValue, setSelectedValue] = useState("1");
  const handleChange = (e) => {
    console.log("Fruit Selected!!", e);
    if (typeof window !== "undefined") {
      localStorage.setItem("quantity", e);
    }
    setSelectedValue(e);
  };

  const state = {
    showVideo: {},
    showGalleryPlayButton: true,
    showVide: {},
    showGalleryFullscreenButton: true,
  };

  const images = [
    {
      original:
        "/plasmic/blank_project/images/website_images/gamebox_back_cover.JPG",
      thumbnail:
        "/plasmic/blank_project/images/website_images/gamebox_back_cover.JPG",
    },
    {
      original:
        "/plasmic/blank_project/images/website_images/gamebox_cover.JPG",
      thumbnail:
        "/plasmic/blank_project/images/website_images/gamebox_cover.JPG",
    },
    {
      original:
        "/plasmic/blank_project/images/website_images/gamebox_gameplay_cards.jpg",
      thumbnail:
        "/plasmic/blank_project/images/website_images/gamebox_gameplay_cards.jpg",
    },
    {
      original:
        "/plasmic/blank_project/images/website_images/gamebox_gameplay_side.jpg",
      thumbnail:
        "/plasmic/blank_project/images/website_images/gamebox_gameplay_side.jpg",
    },
    {
      thumbnail:
        "/plasmic/blank_project/images/website_images/tiktok_image.png",
      original: "/plasmic/blank_project/images/website_images/tiktok_image.png",
      embedUrl: "https://www.instagram.com/reel/CgR0t_IjUDl",
      description: "Madisonopoly Instagram Video",
      renderItem: _renderVideo.bind(),
    },
  ];

  const [loading, setLoading] = useState(false);

  const iframe_container = {
    left: 0,
    width: "100%",
    height: 500,
    position: "relative",
  };

  const iframe = {
    top: 0,
    left: 0,
    width: "100%",
    height: "100%",
    position: "relative",
    border: 0,
  };

  function _renderVideo(item) {
    return (
      <div>
        <div className={classNames(projectcss.all, sty.row_container)}>
          <div className={classNames(projectcss.all, sty.first_row)}>
            <p>Madisonopoly on Tiktok</p>
          </div>
          <HStack>
            <blockquote
              class="instagram-media"
              data-instgrm-captioned
              data-instgrm-permalink="https://www.instagram.com/reel/CgR0t_IjUDl/?utm_source=ig_embed&amp;utm_campaign=loading"
              data-instgrm-version="14"
              style=" background:#FFF; border:0; border-radius:3px; box-shadow:0 0 1px 0 rgba(0,0,0,0.5),0 1px 10px 0 rgba(0,0,0,0.15); margin: 1px; max-width:540px; min-width:326px; padding:0; width:99.375%; width:-webkit-calc(100% - 2px); width:calc(100% - 2px);"
            >
              <div style="padding:16px;">
                {" "}
                <a
                  href="https://www.instagram.com/reel/CgR0t_IjUDl/?utm_source=ig_embed&amp;utm_campaign=loading"
                  style=" background:#FFFFFF; line-height:0; padding:0 0; text-align:center; text-decoration:none; width:100%;"
                  target="_blank"
                >
                  {" "}
                  <div style=" display: flex; flex-direction: row; align-items: center;">
                    {" "}
                    <div style="background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 40px; margin-right: 14px; width: 40px;"></div>{" "}
                    <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center;">
                      {" "}
                      <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 100px;"></div>{" "}
                      <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 60px;"></div>
                    </div>
                  </div>
                  <div style="padding: 19% 0;"></div>{" "}
                  <div style="display:block; height:50px; margin:0 auto 12px; width:50px;">
                    <svg
                      width="50px"
                      height="50px"
                      viewBox="0 0 60 60"
                      version="1.1"
                      xmlns="https://www.w3.org/2000/svg"
                      xmlns:xlink="https://www.w3.org/1999/xlink"
                    >
                      <g
                        stroke="none"
                        stroke-width="1"
                        fill="none"
                        fill-rule="evenodd"
                      >
                        <g
                          transform="translate(-511.000000, -20.000000)"
                          fill="#000000"
                        >
                          <g>
                            <path d="M556.869,30.41 C554.814,30.41 553.148,32.076 553.148,34.131 C553.148,36.186 554.814,37.852 556.869,37.852 C558.924,37.852 560.59,36.186 560.59,34.131 C560.59,32.076 558.924,30.41 556.869,30.41 M541,60.657 C535.114,60.657 530.342,55.887 530.342,50 C530.342,44.114 535.114,39.342 541,39.342 C546.887,39.342 551.658,44.114 551.658,50 C551.658,55.887 546.887,60.657 541,60.657 M541,33.886 C532.1,33.886 524.886,41.1 524.886,50 C524.886,58.899 532.1,66.113 541,66.113 C549.9,66.113 557.115,58.899 557.115,50 C557.115,41.1 549.9,33.886 541,33.886 M565.378,62.101 C565.244,65.022 564.756,66.606 564.346,67.663 C563.803,69.06 563.154,70.057 562.106,71.106 C561.058,72.155 560.06,72.803 558.662,73.347 C557.607,73.757 556.021,74.244 553.102,74.378 C549.944,74.521 548.997,74.552 541,74.552 C533.003,74.552 532.056,74.521 528.898,74.378 C525.979,74.244 524.393,73.757 523.338,73.347 C521.94,72.803 520.942,72.155 519.894,71.106 C518.846,70.057 518.197,69.06 517.654,67.663 C517.244,66.606 516.755,65.022 516.623,62.101 C516.479,58.943 516.448,57.996 516.448,50 C516.448,42.003 516.479,41.056 516.623,37.899 C516.755,34.978 517.244,33.391 517.654,32.338 C518.197,30.938 518.846,29.942 519.894,28.894 C520.942,27.846 521.94,27.196 523.338,26.654 C524.393,26.244 525.979,25.756 528.898,25.623 C532.057,25.479 533.004,25.448 541,25.448 C548.997,25.448 549.943,25.479 553.102,25.623 C556.021,25.756 557.607,26.244 558.662,26.654 C560.06,27.196 561.058,27.846 562.106,28.894 C563.154,29.942 563.803,30.938 564.346,32.338 C564.756,33.391 565.244,34.978 565.378,37.899 C565.522,41.056 565.552,42.003 565.552,50 C565.552,57.996 565.522,58.943 565.378,62.101 M570.82,37.631 C570.674,34.438 570.167,32.258 569.425,30.349 C568.659,28.377 567.633,26.702 565.965,25.035 C564.297,23.368 562.623,22.342 560.652,21.575 C558.743,20.834 556.562,20.326 553.369,20.18 C550.169,20.033 549.148,20 541,20 C532.853,20 531.831,20.033 528.631,20.18 C525.438,20.326 523.257,20.834 521.349,21.575 C519.376,22.342 517.703,23.368 516.035,25.035 C514.368,26.702 513.342,28.377 512.574,30.349 C511.834,32.258 511.326,34.438 511.181,37.631 C511.035,40.831 511,41.851 511,50 C511,58.147 511.035,59.17 511.181,62.369 C511.326,65.562 511.834,67.743 512.574,69.651 C513.342,71.625 514.368,73.296 516.035,74.965 C517.703,76.634 519.376,77.658 521.349,78.425 C523.257,79.167 525.438,79.673 528.631,79.82 C531.831,79.965 532.853,80.001 541,80.001 C549.148,80.001 550.169,79.965 553.369,79.82 C556.562,79.673 558.743,79.167 560.652,78.425 C562.623,77.658 564.297,76.634 565.965,74.965 C567.633,73.296 568.659,71.625 569.425,69.651 C570.167,67.743 570.674,65.562 570.82,62.369 C570.966,59.17 571,58.147 571,50 C571,41.851 570.966,40.831 570.82,37.631"></path>
                          </g>
                        </g>
                      </g>
                    </svg>
                  </div>
                  <div style="padding-top: 8px;">
                    {" "}
                    <div style=" color:#3897f0; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:550; line-height:18px;">
                      View this post on Instagram
                    </div>
                  </div>
                  <div style="padding: 12.5% 0;"></div>{" "}
                  <div style="display: flex; flex-direction: row; margin-bottom: 14px; align-items: center;">
                    <div>
                      {" "}
                      <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(0px) translateY(7px);"></div>{" "}
                      <div style="background-color: #F4F4F4; height: 12.5px; transform: rotate(-45deg) translateX(3px) translateY(1px); width: 12.5px; flex-grow: 0; margin-right: 14px; margin-left: 2px;"></div>{" "}
                      <div style="background-color: #F4F4F4; border-radius: 50%; height: 12.5px; width: 12.5px; transform: translateX(9px) translateY(-18px);"></div>
                    </div>
                    <div style="margin-left: 8px;">
                      {" "}
                      <div style=" background-color: #F4F4F4; border-radius: 50%; flex-grow: 0; height: 20px; width: 20px;"></div>{" "}
                      <div style=" width: 0; height: 0; border-top: 2px solid transparent; border-left: 6px solid #f4f4f4; border-bottom: 2px solid transparent; transform: translateX(16px) translateY(-4px) rotate(30deg)"></div>
                    </div>
                    <div style="margin-left: auto;">
                      {" "}
                      <div style=" width: 0px; border-top: 8px solid #F4F4F4; border-right: 8px solid transparent; transform: translateY(16px);"></div>{" "}
                      <div style=" background-color: #F4F4F4; flex-grow: 0; height: 12px; width: 16px; transform: translateY(-4px);"></div>{" "}
                      <div style=" width: 0; height: 0; border-top: 8px solid #F4F4F4; border-left: 8px solid transparent; transform: translateY(-4px) translateX(8px);"></div>
                    </div>
                  </div>{" "}
                  <div style="display: flex; flex-direction: column; flex-grow: 1; justify-content: center; margin-bottom: 24px;">
                    {" "}
                    <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; margin-bottom: 6px; width: 224px;"></div>{" "}
                    <div style=" background-color: #F4F4F4; border-radius: 4px; flex-grow: 0; height: 14px; width: 144px;"></div>
                  </div>
                </a>
                <p style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; line-height:17px; margin-bottom:0; margin-top:8px; overflow:hidden; padding:8px 0 7px; text-align:center; text-overflow:ellipsis; white-space:nowrap;">
                  <a
                    href="https://www.instagram.com/reel/CgR0t_IjUDl/?utm_source=ig_embed&amp;utm_campaign=loading"
                    style=" color:#c9c8cd; font-family:Arial,sans-serif; font-size:14px; font-style:normal; font-weight:normal; line-height:17px; text-decoration:none;"
                    target="_blank"
                  >
                    A post shared by Madisonopoly (@madisonopoly.wi)
                  </a>
                </p>
              </div>
            </blockquote>{" "}
            <script async src="//www.instagram.com/embed.js"></script>
          </HStack>
        </div>
      </div>
    );
  }

  function _toggleShowVideo(url) {
    state.showVideo[url] = !Boolean(state.showVideo[url]);
    state.showVideo = state.showVideo;
    // setState({
    //   showVideo: state.showVideo,
    // });
  }

  const handleSubmit: React.FormEventHandler<HTMLFormElement> = async (e) => {
    e.preventDefault();
    setLoading(true);
    // Create a Checkout Session.
    const response = await fetchPostJSON("/api/checkout_sessions", {
      amount: selectedValue,
    });

    if (response.statusCode === 500) {
      console.error(response.message);
      return;
    }

    // Redirect to Checkout.
    const stripe = await getStripe();
    const { error } = await stripe!.redirectToCheckout({
      // Make the id field from the Checkout Session creation API response
      // available to this file, so you can provide it as parameter here
      // instead of the {{CHECKOUT_SESSION_ID}} placeholder.
      sessionId: response.id,
    });
    // If `redirectToCheckout` fails due to a browser or network
    // error, display the localized error message to your customer
    // using `error.message`.
    console.warn(error.message);
    setLoading(false);
  };

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <MadisonopolyHeaderFinal
            data-plasmic-name={"madisonopolyHeaderFinal"}
            data-plasmic-override={overrides.madisonopolyHeaderFinal}
            className={classNames(
              "__wab_instance",
              sty.madisonopolyHeaderFinal
            )}
          />

          <div className={classNames(projectcss.all, sty.freeBox__mDtZy)}>
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? true
                  : false
              ) ? (
                <Heading textAlign="center">{"Madisonopoly"}</Heading>
              ) : null}
              <div className={classNames(projectcss.all, sty.column__gRxnh)}>
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__kh7Y)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"100%" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  loading={"lazy" as const}
                  src={{
                    src: "/plasmic/blank_project/images/gameboxBoardDetailedpng.png",
                    fullWidth: 4000,
                    fullHeight: 3091,
                    aspectRatio: undefined,
                  }}
                />
                <div style={ballStyle}></div>
                <ImageGallery originalHeight={"100"} items={images} />

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__m02Uz)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__pRDjd)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"439px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00619Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__jchb1)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"437px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00625Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />

                    <Slider
                      className={classNames(
                        "__wab_instance",
                        sty.slider__hazjc
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__y5Bjf)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        src={
                          "https://via.placeholder.com/150x90/FF0000/FFFFFF/?text=Slide_1" as const
                        }
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__kOf0W)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        src={
                          "https://via.placeholder.com/150x90/00FF00/FFFFFF/?text=Slide_2" as const
                        }
                      />

                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__zeXxO)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        src={
                          "https://via.placeholder.com/150x90/0000FF/FFFFFF/?text=Slide_3" as const
                        }
                      />
                    </Slider>
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__hDw9Q)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__umVwy)}
                      displayHeight={"216px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"250px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00625Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__e5X3M)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"251px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00640Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__a6Syh)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"282px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00619Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />
                  </div>
                ) : null}
                {true ? (
                  <Slider
                    autoplay={true}
                    className={classNames("__wab_instance", sty.slider__aulKa)}
                    dots={true}
                    fade={true}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__liSet)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00619Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___66V2)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/blank_project/images/dsc00625Jpg.jpeg",
                        fullWidth: 4592,
                        fullHeight: 3056,
                        aspectRatio: undefined,
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__oPzN9)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      src={{
                        src: "/plasmic/blank_project/images/img3820Jpg.jpeg",
                        fullWidth: 4032,
                        fullHeight: 2753,
                        aspectRatio: undefined,
                      }}
                    />

                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__eDmBp)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("247px" as const)
                          : ("459px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("368px" as const)
                          : ("auto" as const)
                      }
                      src={{
                        src: "/plasmic/blank_project/images/img3822Resizedjpg.jpeg",
                        fullWidth: 3175,
                        fullHeight: 2934,
                        aspectRatio: undefined,
                      }}
                    />
                  </Slider>
                ) : null}
              </div>

              <div className={classNames(projectcss.all, sty.column__ulj3T)}>
                <div className={classNames(projectcss.all, sty.freeBox__aDw8V)}>
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Heading>{"Madisonopoly"}</Heading>
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tIusW
                    )}
                  >
                    <Center>
                      <HStack spacing="24px" marginBottom="40px">
                        <VStack>
                          <FaGrinTears size={28} />
                          <Center>
                            <Text textAlign="center">Quality Time</Text>
                          </Center>
                        </VStack>
                        <VStack>
                          <FaComments size={28} />
                          <Center>
                            <Text textAlign="center"> Convo Starter </Text>
                          </Center>
                        </VStack>
                        <VStack>
                          <FaUniversity size={28} />
                          <Center>
                            <Text textAlign="center"> Proud Alumni</Text>
                          </Center>
                        </VStack>
                      </HStack>
                    </Center>

                    <React.Fragment>
                      <React.Fragment>
                        {
                          "The memorable experiences in Langdon Street, the sleepless nights we had in College Library during finals week, that 2 AM Mac N Cheese slice at Ian's Pizza on Franklin, and many more..\n\nHow about buying those properties and renting it to your friends in a Monopoly game? You can build houses and hotels on your favorite Madtown spots.\n\nA token of your time spent in Madison or the token of new adventures :)\n\nThe box comes with:\n"
                        }
                      </React.Fragment>

                      <ul
                        data-plasmic-name={"ul"}
                        data-plasmic-override={overrides.ul}
                        className={classNames(
                          projectcss.all,
                          projectcss.ul,
                          sty.ul
                        )}
                      >
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kAwxO
                          )}
                        >
                          {"32 red houses"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__lFrwv
                          )}
                        >
                          {"12 green hotels"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___8GCak
                          )}
                        >
                          {"28 Title Deed Cards"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kAwxO
                          )}
                        >
                          {"16 Dare Cards"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__kAwxO
                          )}
                        >
                          {"16 Campus Mail Cards"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__pQtDz
                          )}
                        >
                          {"20.5K in game cash"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__pbGge
                          )}
                        >
                          {"6 game tokens"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__x536M
                          )}
                        >
                          {"1 game box"}
                        </li>

                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__ogQjL
                          )}
                        >
                          {'20 X 20" gameboard'}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li___8GCak
                          )}
                        >
                          {"2 Dices"}
                        </li>
                        <li
                          className={classNames(
                            projectcss.all,
                            projectcss.li,
                            projectcss.__wab_text,
                            sty.li__ogQjL
                          )}
                        >
                          {"30 Day Moneyback Guarantee "}
                        </li>
                      </ul>
                    </React.Fragment>
                  </div>
                </div>
                <form onSubmit={handleSubmit} method="POST">
                  <div
                    className={classNames(projectcss.all, sty.freeBox__gvTr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lCR5
                      )}
                    >
                      {"Quantity:"}
                    </div>

                    <Select
                      data-plasmic-name={"select"}
                      data-plasmic-override={overrides.select}
                      className={classNames("__wab_instance", sty.select)}
                      defaultValue={"value1" as const}
                      onChange={handleChange}
                    >
                      <Select__Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__hoiXq
                        )}
                        value={"1" as const}
                      >
                        {"1"}
                      </Select__Option>

                      <Select__Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__iuXtT
                        )}
                        value={"2" as const}
                      >
                        {"2"}
                      </Select__Option>

                      <Select__Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__q6Qru
                        )}
                        value={"3" as const}
                      >
                        {"3"}
                      </Select__Option>

                      <Select__Option
                        className={classNames(
                          "__wab_instance",
                          sty.option___0ZIi9
                        )}
                        value={"4" as const}
                      >
                        {"4"}
                      </Select__Option>

                      <Select__Option
                        className={classNames(
                          "__wab_instance",
                          sty.option__ivQkk
                        )}
                        value={"5" as const}
                      >
                        {"5"}
                      </Select__Option>
                    </Select>
                    <section>
                      <button type="submit" role="link">
                        Proceed to Secure Checkout
                      </button>
                    </section>
                    <style jsx>
                      {`
                        section {
                          background: #ffffff;
                          display: flex;
                          flex-direction: column;
                          width: 400px;
                          height: 112px;
                          margin-top: 24px;
                          border-radius: 6px;
                          justify-content: space-between;
                        }
                        button {
                          height: 36px;
                          background: #556cd6;
                          border-radius: 4px;
                          color: white;
                          border: 0;
                          font-weight: 600;
                          cursor: pointer;
                          transition: all 0.2s ease;
                          box-shadow: 0px 4px 5.5px 0px rgba(0, 0, 0, 0.07);
                        }
                        button:hover {
                          opacity: 0.8;
                        }
                      `}
                    </style>
                  </div>
                </form>
              </div>
            </div>
          </div>
        </div>
      </div>
      <FooterComponent
        data-plasmic-name={"footerComponent"}
        data-plasmic-override={overrides.footerComponent}
        className={classNames("__wab_instance", sty.footerComponent)}
      />
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "madisonopolyHeaderFinal",
    "svg",
    "columns",
    "ul",
    "select",
    "footerComponent",
  ],
  madisonopolyHeaderFinal: ["madisonopolyHeaderFinal"],
  svg: ["svg"],
  columns: ["columns", "ul", "select"],
  ul: ["ul"],
  select: ["select"],
  footerComponent: ["footerComponent"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  madisonopolyHeaderFinal: typeof MadisonopolyHeaderFinal;
  svg: "svg";
  columns: "div";
  ul: "ul";
  select: typeof Select;
  footerComponent: typeof FooterComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPrdct__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPrdct__VariantsArgs;
    args?: PlasmicPrdct__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPrdct__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicPrdct__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicPrdct__ArgProps,
      internalVariantPropNames: PlasmicPrdct__VariantProps,
    });

    return PlasmicPrdct__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPrdct";
  } else {
    func.displayName = `PlasmicPrdct.${nodeName}`;
  }
  return func;
}

export const PlasmicPrdct = Object.assign(
  // Top-level PlasmicPrdct renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    madisonopolyHeaderFinal: makeNodeComponent("madisonopolyHeaderFinal"),
    svg: makeNodeComponent("svg"),
    columns: makeNodeComponent("columns"),
    ul: makeNodeComponent("ul"),
    select: makeNodeComponent("select"),
    footerComponent: makeNodeComponent("footerComponent"),

    // Metadata about props expected for PlasmicPrdct
    internalVariantProps: PlasmicPrdct__VariantProps,
    internalArgProps: PlasmicPrdct__ArgProps,
  }
);

export default PlasmicPrdct;
/* prettier-ignore-end */
