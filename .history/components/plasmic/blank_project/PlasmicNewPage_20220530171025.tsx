// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wA73ZswqroE6r1m1xaxGJ1
// Component: qrBp5OCf40
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import MadisonopolyHeaderFinal from "../../MadisonopolyHeaderFinal"; // plasmic-import: zLYGck-fye5/component
import HeaderMadisonopoly from "../../HeaderMadisonopoly"; // plasmic-import: SbmFAmFl460/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: aOTvFzJBlc_/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import FooterComponent from "../../FooterComponent"; // plasmic-import: Mfi3gMBJIGb/component

import { useScreenVariants as useScreenVariantsabUxTrbG0Cf5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AbUXTrbG0Cf5V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wA73ZswqroE6r1m1xaxGJ1/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: qrBp5OCf40/css

import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Tri1W4mor9t/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: M7J874mTSvr/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: q8bdo62baej/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 980jwjq2w1h/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: _UA6I6vZTD-/icon
import { Router, useRouter } from "next/router";

export type PlasmicNewPage__VariantMembers = {};

export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: p.Flex<"div">;
  madisonopolyHeaderFinal?: p.Flex<typeof MadisonopolyHeaderFinal>;
  headerMadisonopoly?: p.Flex<typeof HeaderMadisonopoly>;
  navigationBar?: p.Flex<typeof NavigationBar>;
  defySection?: p.Flex<"div">;
  riseSection?: p.Flex<"div">;
  defySection2?: p.Flex<"div">;
  riseSection2?: p.Flex<"div">;
  footerComponent?: p.Flex<typeof FooterComponent>;
};

export interface DefaultNewPageProps {}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsabUxTrbG0Cf5V(),
  });
  const handleImageClick = (sectionID) => {
    document.getElementById(sectionID).scrollIntoView({ behavior: "smooth" });
  };
  const router = useRouter();

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <MadisonopolyHeaderFinal
            data-plasmic-name={"madisonopolyHeaderFinal"}
            data-plasmic-override={overrides.madisonopolyHeaderFinal}
            className={classNames(
              "__wab_instance",
              sty.madisonopolyHeaderFinal
            )}
          />

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <HeaderMadisonopoly
              data-plasmic-name={"headerMadisonopoly"}
              data-plasmic-override={overrides.headerMadisonopoly}
              className={classNames("__wab_instance", sty.headerMadisonopoly)}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__cUrCs
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={
                        "Madisonopoly Board Game - Ultimate UW Madison Gift - UW Madison Board Game"
                      }
                      className={classNames(sty.img__joDPb)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("235px" as const)
                          : ("391px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"803px" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      src={{
                        src: "/plasmic/blank_project/images/sideMadisonopolyRemovebgPreview1Png.png",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined,
                      }}
                    />
                  </p.PlasmicLink>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              itemsGap={8 as const}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___4KoVc
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"FAQ"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__lyyP3
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"About Us"}
                  </p.PlasmicLink>
                </React.Fragment>
              }
              responsiveBreakpoint={768 as const}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___2FNi)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__yzgzk)}
            >
              <div className={classNames(projectcss.all, sty.column__n1Anz)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ndBy6)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__meB4X
                    )}
                  >
                    {"Ultimate UW Madison Board Game"}
                  </h1>

                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jmWN
                    )}
                  >
                    {
                      "Think of it as Monopoly meets Cards Against Humanity. And of course it takes place in Madtown."
                    }
                  </h2>

                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__rBpLx
                      )}
                      onClick={() => handleImageClick("section1")}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sAi0D
                        )}
                      >
                        {"Learn more ->"}
                      </div>
                    </Button>
                  ) : null}
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__qgXkL)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Rnob)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <Button
                      className={classNames("__wab_instance", sty.button__pXl4)}
                      onClick={() => handleImageClick("section1")}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Te6E
                        )}
                      >
                        {"Learn more ->"}
                      </div>
                    </Button>
                  ) : null}
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__arp1V)}
                  >
                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___3QX9
                      )}
                      direction={"down" as const}
                      duration={1000 as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={"Madison 1980s - UW Madison Gifts"}
                        className={classNames(sty.img___16GhS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("194px" as const)
                            : ("194px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"217px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"194px" as const}
                        src={{
                          src: "/plasmic/blank_project/images/madison1980SEditedjpg.jpeg",
                          fullWidth: 4000,
                          fullHeight: 2670,
                          aspectRatio: undefined,
                        }}
                      />
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__elRRg
                      )}
                      damping={1 as const}
                      delay={1 as const}
                      direction={"down" as const}
                      duration={2000 as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={"Madison 2022 - UW Madison Gifts"}
                        className={classNames(sty.img___5BPBt)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("194px" as const)
                            : ("194px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"217px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"194px" as const}
                        src={{
                          src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                          fullWidth: 640,
                          fullHeight: 480,
                          aspectRatio: undefined,
                        }}
                      />
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__xsE8L
                      )}
                      damping={2 as const}
                      delay={2 as const}
                      direction={"down" as const}
                      duration={3000 as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={"Madison Future - UW Madison Gifts"}
                        className={classNames(sty.img__p1XyF)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("194px" as const)
                            : ("194px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"217px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"194px" as const}
                        src={{
                          src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined,
                        }}
                      />
                    </Reveal>
                  </div>
                ) : null}
                {true ? (
                  <Tilt
                    className={classNames("__wab_instance", sty.tilt__frhHd)}
                  >
                    {null}
                  </Tilt>
                ) : null}

                <Tilt className={classNames("__wab_instance", sty.tilt__sQbKh)}>
                  <p.PlasmicImg
                    alt={
                      "Madisonopoly UW Madison Board Game - Ultimate UW Madison Gift"
                    }
                    className={classNames(sty.img__hNv8P)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"530px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/gameboxBoardDetailedpng.png",
                      fullWidth: 4000,
                      fullHeight: 3091,
                      aspectRatio: undefined,
                    }}
                  />
                </Tilt>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__gyVvI)}
                    id={"section1" as const}
                    itemID={"section1" as const}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cw2Q
                        )}
                      >
                        {true ? (
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal___9Ijt
                            )}
                            triggerOnce={true}
                          >
                            <p.PlasmicImg
                              alt={
                                "Madisonopoly Dare Cards - Ultimate UW Madison Gifts"
                              }
                              className={classNames(sty.img__r5KG4)}
                              displayHeight={"auto" as const}
                              displayMaxHeight={"300px" as const}
                              displayMaxWidth={"300px" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"auto" as const}
                              loading={"lazy" as const}
                              src={{
                                src: "/plasmic/blank_project/images/cheese1Png.png",
                                fullWidth: 512,
                                fullHeight: 512,
                                aspectRatio: undefined,
                              }}
                            />
                          </Reveal>
                        ) : null}
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hHuQo
                            )}
                          >
                            <Reveal
                              cascade={false}
                              className={classNames(
                                "__wab_instance",
                                sty.reveal__fxiwG
                              )}
                              direction={"down" as const}
                              duration={1000 as const}
                              triggerOnce={true}
                            >
                              <p.PlasmicImg
                                alt={"Madison 1980s - UW Madison Gifts"}
                                className={classNames(sty.img__fZvq)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("194px" as const)
                                    : ("194px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"217px" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"194px" as const}
                                src={{
                                  src: "/plasmic/blank_project/images/madison1980SEditedjpg.jpeg",
                                  fullWidth: 4000,
                                  fullHeight: 2670,
                                  aspectRatio: undefined,
                                }}
                              />
                            </Reveal>

                            <Reveal
                              className={classNames(
                                "__wab_instance",
                                sty.reveal__d8Tup
                              )}
                              damping={1 as const}
                              delay={1 as const}
                              direction={"down" as const}
                              duration={2000 as const}
                              triggerOnce={true}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img__rPvCc)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("194px" as const)
                                    : ("194px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"217px" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"194px" as const}
                                src={{
                                  src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                  fullWidth: 640,
                                  fullHeight: 480,
                                  aspectRatio: undefined,
                                }}
                              />
                            </Reveal>

                            <Reveal
                              className={classNames(
                                "__wab_instance",
                                sty.reveal__syY1W
                              )}
                              damping={2 as const}
                              delay={2 as const}
                              direction={"down" as const}
                              duration={3000 as const}
                              triggerOnce={true}
                            >
                              <p.PlasmicImg
                                alt={""}
                                className={classNames(sty.img___4PhXr)}
                                displayHeight={
                                  hasVariant(
                                    globalVariants,
                                    "screen",
                                    "mobileOnly"
                                  )
                                    ? ("194px" as const)
                                    : ("194px" as const)
                                }
                                displayMaxHeight={"none" as const}
                                displayMaxWidth={"217px" as const}
                                displayMinHeight={"0" as const}
                                displayMinWidth={"0" as const}
                                displayWidth={"194px" as const}
                                src={{
                                  src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                                  fullWidth: 1920,
                                  fullHeight: 1080,
                                  aspectRatio: undefined,
                                }}
                              />
                            </Reveal>
                          </div>
                        ) : null}
                      </div>
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__iyQAi)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rx8Hn
                        )}
                      >
                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal___7MINu
                          )}
                          triggerOnce={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Xo
                            )}
                          >
                            {"Best Years of Your Life\n In a Board Game"}
                          </div>
                        </Reveal>

                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__ahDrN
                          )}
                          triggerOnce={true}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__gldcm
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "You liked eating pizza at Ian's and you were there when there was no spot left to study at College Library. \n\nYou and your friends pulled all nighters just to pass that brutal OCHEM final. \n\nNow it's your time to own the place that gave you the memories and have some fun with it."
                              : "You liked eating pizza at Ian's and you were there when there was no spot left to study at College Library. \nYou and your friends pulled all nighters just to pass that brutal OCHEM final. \nNow it's your time to own the place that gave you the memories and have some fun with it."}
                          </div>
                        </Reveal>
                      </p.Stack>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mtgxe
                        )}
                      >
                        {(
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? true
                            : true
                        ) ? (
                          <Reveal
                            className={classNames(
                              "__wab_instance",
                              sty.reveal__olYtA
                            )}
                            triggerOnce={true}
                          >
                            {(
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? true
                                : true
                            ) ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox___7IvOv
                                )}
                              >
                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__dgEKh)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("194px" as const)
                                      : ("194px" as const)
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"254px" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"194px" as const}
                                  src={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? {
                                          src: "/plasmic/blank_project/images/madison1980SEditedjpg.jpeg",
                                          fullWidth: 4000,
                                          fullHeight: 2670,
                                          aspectRatio: undefined,
                                        }
                                      : {
                                          src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                          fullWidth: 640,
                                          fullHeight: 480,
                                          aspectRatio: undefined,
                                        }
                                  }
                                />

                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__bbLuV)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("194px" as const)
                                      : ("194px" as const)
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"217px" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"194px" as const}
                                  src={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? {
                                          src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                          fullWidth: 640,
                                          fullHeight: 480,
                                          aspectRatio: undefined,
                                        }
                                      : {
                                          src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                                          fullWidth: 1920,
                                          fullHeight: 1080,
                                          aspectRatio: undefined,
                                        }
                                  }
                                />

                                <p.PlasmicImg
                                  alt={""}
                                  className={classNames(sty.img__jqIhQ)}
                                  displayHeight={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? ("194px" as const)
                                      : ("194px" as const)
                                  }
                                  displayMaxHeight={"none" as const}
                                  displayMaxWidth={"254px" as const}
                                  displayMinHeight={"0" as const}
                                  displayMinWidth={"0" as const}
                                  displayWidth={"194px" as const}
                                  src={
                                    hasVariant(
                                      globalVariants,
                                      "screen",
                                      "mobileOnly"
                                    )
                                      ? {
                                          src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                                          fullWidth: 1920,
                                          fullHeight: 1080,
                                          aspectRatio: undefined,
                                        }
                                      : {
                                          src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                          fullWidth: 640,
                                          fullHeight: 480,
                                          aspectRatio: undefined,
                                        }
                                  }
                                />
                              </div>
                            ) : null}
                          </Reveal>
                        ) : null}

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__wDtgy
                          )}
                          color={"blue" as const}
                          onClick={() => router.push("/product")}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oPJnp
                            )}
                          >
                            {"Show me"}
                          </div>
                        </Button>

                        <Button
                          className={classNames(
                            "__wab_instance",
                            sty.button__c53TY
                          )}
                          color={"clear" as const}
                          onClick={() => handleImageClick("section2")}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___5Hgby
                            )}
                          >
                            {"Learn more…"}
                          </div>
                        </Button>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </div>
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lU4R5)}
                id={"section1" as const}
                itemID={"section1" as const}
              >
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nbw0K)}
                  >
                    {true ? (
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__nikHg
                        )}
                        triggerOnce={true}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__o2PHu)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"300px" as const}
                          displayMaxWidth={"300px" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/blank_project/images/cheese1Png.png",
                            fullWidth: 512,
                            fullHeight: 512,
                            aspectRatio: undefined,
                          }}
                        />
                      </Reveal>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__sOwTq
                        )}
                      >
                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__oOot1
                          )}
                          damping={1 as const}
                          delay={1 as const}
                          direction={"down" as const}
                          duration={2000 as const}
                          reverse={false}
                          triggerOnce={true}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__vb9Iz)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("194px" as const)
                                : ("194px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"217px" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"194px" as const}
                            src={{
                              src: "/plasmic/blank_project/images/madison1980SEditedjpg.jpeg",
                              fullWidth: 4000,
                              fullHeight: 2670,
                              aspectRatio: undefined,
                            }}
                          />
                        </Reveal>

                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__d76J
                          )}
                          damping={2 as const}
                          delay={2 as const}
                          direction={"down" as const}
                          duration={3000 as const}
                          triggerOnce={true}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__fSeS1)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("194px" as const)
                                : ("194px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"217px" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"194px" as const}
                            src={{
                              src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                              fullWidth: 640,
                              fullHeight: 480,
                              aspectRatio: undefined,
                            }}
                          />
                        </Reveal>

                        <Reveal
                          className={classNames(
                            "__wab_instance",
                            sty.reveal__gvWhd
                          )}
                          damping={1 as const}
                          delay={1 as const}
                          direction={"down" as const}
                          duration={4000 as const}
                          reverse={false}
                          triggerOnce={true}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img__f871I)}
                            displayHeight={
                              hasVariant(globalVariants, "screen", "mobileOnly")
                                ? ("194px" as const)
                                : ("194px" as const)
                            }
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"217px" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"194px" as const}
                            src={{
                              src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                              fullWidth: 1920,
                              fullHeight: 1080,
                              aspectRatio: undefined,
                            }}
                          />
                        </Reveal>
                      </div>
                    ) : null}
                  </div>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__tlZ9N)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nEi6K)}
                    >
                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__p5A2
                        )}
                        triggerOnce={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rqGhv
                          )}
                        >
                          {"Best Years of Your Life\n In a Board Game"}
                        </div>
                      </Reveal>

                      <Reveal
                        className={classNames(
                          "__wab_instance",
                          sty.reveal__iko2X
                        )}
                        triggerOnce={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jurjB
                          )}
                        >
                          {hasVariant(globalVariants, "screen", "mobileOnly")
                            ? "You liked eating pizza at Ian's and you were there when there was no spot left to study at College Library. \n\nYou and your friends pulled all nighters just to pass that brutal OCHEM final. \n\nNow it's your time to own the place that gave you the memories and have some fun with it."
                            : "You liked eating pizza at Ian's and you were there when there was no spot left to study at College Library. \nYou and your friends pulled all nighters just to pass that brutal OCHEM final. \nNow it's your time to own the place that gave you the memories and have some fun with it."}
                        </div>
                      </Reveal>
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mzong)}
                    >
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__y5X90
                        )}
                        color={"blue" as const}
                        onClick={() => router.push("/product")}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___27Alq
                          )}
                        >
                          {"Show me"}
                        </div>
                      </Button>

                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__rs85P
                        )}
                        color={"clear" as const}
                        onClick={() => handleImageClick("section2")}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yhm71
                          )}
                        >
                          {"Learn more…"}
                        </div>
                      </Button>
                    </p.Stack>
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}

            <div
              className={classNames(projectcss.all, sty.freeBox__bgOxB)}
              id={"section2" as const}
              itemID={"section2" as const}
            >
              <div
                className={classNames(projectcss.all, sty.freeBox__kXTpJ)}
                id={"section2" as const}
                itemID={"section2" as const}
              >
                <ParallaxWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.scrollParallax__hqOX
                  )}
                  speed={20 as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__aNdw)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("384px" as const)
                        : ("877px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("436px" as const)
                        : ("912px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/gameboxBoardDetailedPhotoRoompng.png",
                      fullWidth: 1000,
                      fullHeight: 772,
                      aspectRatio: undefined,
                    }}
                  />
                </ParallaxWrapper>

                <div
                  data-plasmic-name={"defySection"}
                  data-plasmic-override={overrides.defySection}
                  className={classNames(projectcss.all, sty.defySection)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___0CYc)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__tejTe)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/blank_project/images/boardGamepng.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined,
                        }}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9BwzM
                      )}
                    />
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cfPgN)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__soFvU
                          )}
                        >
                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__xSfQj
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fhK0
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "GameBoard"
                                : "GameBoard"}
                            </div>
                          </ParallaxWrapper>

                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__mSrce
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2MRkz
                              )}
                            >
                              {"Monopoly"}
                            </div>
                          </ParallaxWrapper>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9U5Mw
                            )}
                          >
                            {
                              "Classic Monopoly board with your favorite Madison hang-outs and places. \n\nA board that resembles your Tuesday nights, finals week, your freshman year and so more. \n\nNow you can buy and collect rental income from those places you have been in love. First game board ever themed based upon Madison."
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>

                <ParallaxWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.scrollParallax___4WcDo
                  )}
                  speed={20 as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zkRiR)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"590px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/sampleDeedpng.png",
                      fullWidth: 789,
                      fullHeight: 900,
                      aspectRatio: undefined,
                    }}
                  />
                </ParallaxWrapper>

                <div
                  data-plasmic-name={"riseSection"}
                  data-plasmic-override={overrides.riseSection}
                  className={classNames(projectcss.all, sty.riseSection)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4SAv7
                      )}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4EDf
                          )}
                        >
                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__uX9Nj
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tUhKi
                              )}
                            >
                              {"Local Spots"}
                            </div>
                          </ParallaxWrapper>

                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__cosBv
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8AiZd
                              )}
                            >
                              {"Own Madison"}
                            </div>
                          </ParallaxWrapper>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cJzZy
                            )}
                          >
                            {
                              "You struggled to find a table in College Library during finals week.\n\n How about you owned College Library and charged other players just because being there?"
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aeOyN)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tzP9V)}
                    >
                      <Tilt
                        className={classNames(
                          "__wab_instance",
                          sty.tilt__feFAl
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__ri0Zb)}
                          displayHeight={"auto" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"100%" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"auto" as const}
                          loading={"lazy" as const}
                          src={{
                            src: "/plasmic/blank_project/images/wisconsinCapitalLogopng.png",
                            fullWidth: 700,
                            fullHeight: 454,
                            aspectRatio: undefined,
                          }}
                        />
                      </Tilt>
                    </div>
                  ) : null}
                </div>

                <ParallaxWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.scrollParallax__scCDe
                  )}
                  speed={20 as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___6Sqeq)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"590px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/dare10Png.png",
                      fullWidth: 1039,
                      fullHeight: 661,
                      aspectRatio: undefined,
                    }}
                  />
                </ParallaxWrapper>

                <div
                  data-plasmic-name={"defySection2"}
                  data-plasmic-override={overrides.defySection2}
                  className={classNames(projectcss.all, sty.defySection2)}
                >
                  {true ? (
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__okx7H)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"589px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/nounCheese2331835Png.png",
                        fullWidth: 700,
                        fullHeight: 442,
                        aspectRatio: undefined,
                      }}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tsSHj)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__jTscR)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/blank_project/images/cheesepng.png",
                          fullWidth: 512,
                          fullHeight: 512,
                          aspectRatio: undefined,
                        }}
                      />
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s9LUq)}
                    />
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___3QDb)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ubP1V
                          )}
                        >
                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__vl5Wr
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fiaRz
                              )}
                            >
                              {"Bold?"}
                            </div>
                          </ParallaxWrapper>

                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__q7B7U
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b9H7B
                              )}
                            >
                              {"play with dare cards"}
                            </div>
                          </ParallaxWrapper>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qKhkh
                            )}
                          >
                            {
                              "Dare cards allow you and other players to have an memorable experience. \n\nHowever, it's not everybody's cup of tea. \n\nIt can be a little intimidating for others to perform the courageous tasks in Dare Cards. \n\nSo, it's optional. \n\nHowever if you decide to play with Dare Cards, then other players should keep each other accountable in case someone bails out 🙃."
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__wiEwj)}
                  color={"blue" as const}
                  showEndIcon={true}
                  onClick={() => router.push("/product")}
                >
                  {"Buy now"}
                </Button>

                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bo3Vy)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"553px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/change9Png.png",
                      fullWidth: 1039,
                      fullHeight: 661,
                      aspectRatio: undefined,
                    }}
                  />
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"riseSection2"}
                    data-plasmic-override={overrides.riseSection2}
                    className={classNames(projectcss.all, sty.riseSection2)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o0Usi
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fkJ7X
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gyJa4
                              )}
                            >
                              {"Mail"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rqORr
                              )}
                            >
                              {""}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zmsOj
                              )}
                            >
                              {
                                "The high color fidelity and low compression of ProRes let you record, edit, and deliver broadcast-ready content on the go. Now you can complete a project in ProRes entirely on your iPhone. Or easily bring ProRes videos from your iPhone into Final Cut Pro on your Mac."
                              }
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kWm3R
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bYqpE
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__d67Dh)}>
              <FooterComponent
                data-plasmic-name={"footerComponent"}
                data-plasmic-override={overrides.footerComponent}
                className={classNames("__wab_instance", sty.footerComponent)}
              />
            </div>
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mm8Ow)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("194px" as const)
                  : ("194px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"217px" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"194px" as const}
              src={{
                src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                fullWidth: 1920,
                fullHeight: 1080,
                aspectRatio: undefined,
              }}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "madisonopolyHeaderFinal",
    "headerMadisonopoly",
    "navigationBar",
    "defySection",
    "riseSection",
    "defySection2",
    "riseSection2",
    "footerComponent",
  ],
  madisonopolyHeaderFinal: ["madisonopolyHeaderFinal"],
  headerMadisonopoly: ["headerMadisonopoly"],
  navigationBar: ["navigationBar"],
  defySection: ["defySection"],
  riseSection: ["riseSection"],
  defySection2: ["defySection2"],
  riseSection2: ["riseSection2"],
  footerComponent: ["footerComponent"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  madisonopolyHeaderFinal: typeof MadisonopolyHeaderFinal;
  headerMadisonopoly: typeof HeaderMadisonopoly;
  navigationBar: typeof NavigationBar;
  defySection: "div";
  riseSection: "div";
  defySection2: "div";
  riseSection2: "div";
  footerComponent: typeof FooterComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewPage__ArgProps,
      internalVariantPropNames: PlasmicNewPage__VariantProps,
    });

    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    madisonopolyHeaderFinal: makeNodeComponent("madisonopolyHeaderFinal"),
    headerMadisonopoly: makeNodeComponent("headerMadisonopoly"),
    navigationBar: makeNodeComponent("navigationBar"),
    defySection: makeNodeComponent("defySection"),
    riseSection: makeNodeComponent("riseSection"),
    defySection2: makeNodeComponent("defySection2"),
    riseSection2: makeNodeComponent("riseSection2"),
    footerComponent: makeNodeComponent("footerComponent"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
