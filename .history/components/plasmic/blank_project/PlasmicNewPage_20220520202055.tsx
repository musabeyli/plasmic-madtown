// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wA73ZswqroE6r1m1xaxGJ1
// Component: qrBp5OCf40
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import HeaderMadisonopoly from "../../HeaderMadisonopoly"; // plasmic-import: SbmFAmFl460/component
import { NavigationBar } from "@plasmicpkgs/plasmic-nav"; // plasmic-import: jGx9tiKJoex/codeComponent
import Button from "../../Button"; // plasmic-import: aOTvFzJBlc_/component
import { Reveal } from "@plasmicpkgs/react-awesome-reveal"; // plasmic-import: R6s1FdhksG/codeComponent
import Tilt from "@plasmicpkgs/react-parallax-tilt"; // plasmic-import: PfY466VIuq/codeComponent
import { ParallaxWrapper } from "@plasmicpkgs/react-scroll-parallax"; // plasmic-import: bozP4lLlAZ/codeComponent
import FooterComponent from "../../FooterComponent"; // plasmic-import: Mfi3gMBJIGb/component

import { useScreenVariants as useScreenVariantsabUxTrbG0Cf5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AbUXTrbG0Cf5V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wA73ZswqroE6r1m1xaxGJ1/projectcss
import sty from "./PlasmicNewPage.module.css"; // plasmic-import: qrBp5OCf40/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 7E0GT9i-81-/icon
import ShoppingCartIcon from "./icons/PlasmicIcon__ShoppingCart"; // plasmic-import: T3tWtDwVAV/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Tri1W4mor9t/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: M7J874mTSvr/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: q8bdo62baej/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 980jwjq2w1h/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: _UA6I6vZTD-/icon

export type PlasmicNewPage__VariantMembers = {};

export type PlasmicNewPage__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage__VariantsArgs;
export const PlasmicNewPage__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage__ArgsType;
export const PlasmicNewPage__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage__OverridesType = {
  root?: p.Flex<"div">;
  aboutUs?: p.Flex<"a"> & Partial<LinkProps>;
  gameRules?: p.Flex<"a"> & Partial<LinkProps>;
  faq?: p.Flex<"a"> & Partial<LinkProps>;
  aboutUs2?: p.Flex<"a"> & Partial<LinkProps>;
  gameRules2?: p.Flex<"a"> & Partial<LinkProps>;
  faq2?: p.Flex<"a"> & Partial<LinkProps>;
  headerMadisonopoly?: p.Flex<typeof HeaderMadisonopoly>;
  navigationBar?: p.Flex<typeof NavigationBar>;
  tilt?: p.Flex<typeof Tilt>;
  defySection?: p.Flex<"div">;
  riseSection?: p.Flex<"div">;
  defySection2?: p.Flex<"div">;
  riseSection2?: p.Flex<"div">;
  footerComponent?: p.Flex<typeof FooterComponent>;
};

export interface DefaultNewPageProps {}

function PlasmicNewPage__RenderFunc(props: {
  variants: PlasmicNewPage__VariantsArgs;
  args: PlasmicNewPage__ArgsType;
  overrides: PlasmicNewPage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsabUxTrbG0Cf5V(),
  });
  const handleImageClick = () => {
    console.log("hello");
    document.getElementById("myid").scrollIntoView({ behavior: "smooth" });
  };
  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__tH4Dy)}
          >
            {true ? (
              <p.PlasmicLink
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bBrYt
                )}
                component={Link}
                href={"/" as const}
                platform={"nextjs"}
              >
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__byON)}
                  displayHeight={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("321px" as const)
                      : ("197px" as const)
                  }
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("395px" as const)
                      : ("395px" as const)
                  }
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("100%" as const)
                      : ("100%" as const)
                  }
                  loading={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("lazy" as const)
                      : ("lazy" as const)
                  }
                  src={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? {
                          src: "/plasmic/blank_project/images/madisonopolyLogopng.png",
                          fullWidth: 914,
                          fullHeight: 335,
                          aspectRatio: undefined,
                        }
                      : {
                          src: "/plasmic/blank_project/images/madisonopolyLogopng.png",
                          fullWidth: 914,
                          fullHeight: 335,
                          aspectRatio: undefined,
                        }
                  }
                  title={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("Madisonopoly" as const)
                      : ("Madisonopoly" as const)
                  }
                />
              </p.PlasmicLink>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__xl6Vk)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"aboutUs"}
                  data-plasmic-override={overrides.aboutUs}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.aboutUs
                  )}
                  component={Link}
                  href={"/about-us" as const}
                  platform={"nextjs"}
                >
                  {true ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__bc4Jq)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9YafC
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "About Us"
                      : "About Us"}
                  </div>

                  {true ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__o7Wdu)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"gameRules"}
                  data-plasmic-override={overrides.gameRules}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.gameRules
                  )}
                  component={Link}
                  href={"/game-rules" as const}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__fDyZe)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fv4Fb
                    )}
                  >
                    {"Game rules"}
                  </div>

                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__sniiP)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"faq"}
                  data-plasmic-override={overrides.faq}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.faq)}
                  component={Link}
                  href={"/faq" as const}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__cptS)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__h4Hgl
                    )}
                  >
                    {"faq"}
                  </div>

                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___2UWrh)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__wlvec
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___5WUoS)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9Wh6P
                      )}
                    >
                      {"Blog"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__uxVab)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
            {true ? (
              <ShoppingCartIcon
                className={classNames(projectcss.all, sty.svg__m6IrD)}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__e6Aj5)}
              >
                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"aboutUs2"}
                  data-plasmic-override={overrides.aboutUs2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.aboutUs2
                  )}
                  component={Link}
                  href={"/about-us" as const}
                  platform={"nextjs"}
                >
                  {true ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__vmKEs)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__weLi9
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "About Us"
                      : "About Us"}
                  </div>

                  {true ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg___0Af9)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"gameRules2"}
                  data-plasmic-override={overrides.gameRules2}
                  hasGap={true}
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    sty.gameRules2
                  )}
                  component={Link}
                  href={"/game-rules" as const}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__qsC61)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__zPrTf
                    )}
                  >
                    {"Game rules"}
                  </div>

                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__pLcwS)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                <p.Stack
                  as={p.PlasmicLink}
                  data-plasmic-name={"faq2"}
                  data-plasmic-override={overrides.faq2}
                  hasGap={true}
                  className={classNames(projectcss.all, projectcss.a, sty.faq2)}
                  component={Link}
                  href={"/faq" as const}
                  platform={"nextjs"}
                >
                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__vN1Lx)}
                      role={"img"}
                    />
                  ) : null}

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__em4X5
                    )}
                  >
                    {"faq"}
                  </div>

                  {false ? (
                    <Icon4Icon
                      className={classNames(projectcss.all, sty.svg__wG8C)}
                      role={"img"}
                    />
                  ) : null}
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__vt1Sa
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___8E1Z)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3FTjn
                      )}
                    >
                      {"Blog"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___4Oufi)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                ) : null}
              </p.Stack>
            ) : null}
          </p.Stack>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <HeaderMadisonopoly
              data-plasmic-name={"headerMadisonopoly"}
              data-plasmic-override={overrides.headerMadisonopoly}
              className={classNames("__wab_instance", sty.headerMadisonopoly)}
            />
          ) : null}
          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
          ) ? (
            <NavigationBar
              data-plasmic-name={"navigationBar"}
              data-plasmic-override={overrides.navigationBar}
              brand={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__neGtj
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                    target={"_blank" as const}
                  >
                    {"Game Rules"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__cUrCs
                    )}
                    component={Link}
                    href={"#" as const}
                    platform={"nextjs"}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__joDPb)}
                      displayHeight={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? ("235px" as const)
                          : ("391px" as const)
                      }
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"803px" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      src={{
                        src: "/plasmic/blank_project/images/sideMadisonopolyRemovebgPreview1Png.png",
                        fullWidth: 500,
                        fullHeight: 500,
                        aspectRatio: undefined,
                      }}
                    />
                  </p.PlasmicLink>
                </React.Fragment>
              }
              className={classNames("__wab_instance", sty.navigationBar)}
              closeButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__h11L3)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/close.svg" as const}
                />
              }
              itemsGap={8 as const}
              menuItems={
                <React.Fragment>
                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___4KoVc
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"FAQ"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__lyyP3
                    )}
                    component={Link}
                    href={"/" as const}
                    platform={"nextjs"}
                  >
                    {"About Us"}
                  </p.PlasmicLink>
                </React.Fragment>
              }
              openButton={
                <p.PlasmicImg
                  alt={""}
                  className={classNames(sty.img__z6Lcw)}
                  displayHeight={"auto" as const}
                  displayMaxHeight={"none" as const}
                  displayMaxWidth={"none" as const}
                  displayMinHeight={"0" as const}
                  displayMinWidth={"0" as const}
                  displayWidth={"auto" as const}
                  src={"https://static1.plasmic.app/menu.svg" as const}
                />
              }
              responsiveBreakpoint={768 as const}
            />
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___2FNi)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__yzgzk)}
            >
              <div className={classNames(projectcss.all, sty.column__n1Anz)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ndBy6)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__meB4X
                    )}
                  >
                    {"Ultimate UW Madison Board Game"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jmWN
                    )}
                  >
                    {
                      "Think of it as Monopoly meets Cards Against Humanity. And of course it takes place in Madtown."
                    }
                  </div>

                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__fphc6
                      )}
                    >
                      {
                        "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                      }
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__rBpLx
                      )}
      onClick={handleImageClick}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sAi0D
                        )}
                      >
                        {"Learn more ->"}
                      </div>
                    </Button>
                  ) : null}
                </p.Stack>
              </div>

              <div className={classNames(projectcss.all, sty.column__qgXkL)}>
                <div
                  className={classNames(projectcss.all, sty.freeBox___2Rnob)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : false
                  ) ? (
                    <Button
                      className={classNames("__wab_instance", sty.button__pXl4)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___0Te6E
                        )}
                      >
                        {"Learn more ->"}
                      </div>
                    </Button>
                  ) : null}
                </div>

                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__arp1V)}
                  >
                    <Reveal
                      cascade={false}
                      className={classNames(
                        "__wab_instance",
                        sty.reveal___3QX9
                      )}
                      direction={"down" as const}
                      duration={1000 as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___16GhS)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("194px" as const)
                            : ("194px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"217px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"194px" as const}
                        src={{
                          src: "/plasmic/blank_project/images/madison1980SEditedjpg.jpeg",
                          fullWidth: 4000,
                          fullHeight: 2670,
                          aspectRatio: undefined,
                        }}
                      />
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__elRRg
                      )}
                      damping={1 as const}
                      delay={1 as const}
                      direction={"down" as const}
                      duration={2000 as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img___5BPBt)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("194px" as const)
                            : ("194px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"217px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"194px" as const}
                        src={{
                          src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                          fullWidth: 640,
                          fullHeight: 480,
                          aspectRatio: undefined,
                        }}
                      />
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__xsE8L
                      )}
                      damping={2 as const}
                      delay={2 as const}
                      direction={"down" as const}
                      duration={3000 as const}
                      triggerOnce={true}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__p1XyF)}
                        displayHeight={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? ("194px" as const)
                            : ("194px" as const)
                        }
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"217px" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"194px" as const}
                        src={{
                          src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                          fullWidth: 1920,
                          fullHeight: 1080,
                          aspectRatio: undefined,
                        }}
                      />
                    </Reveal>
                  </div>
                ) : null}
                {true ? (
                  <Tilt
                    data-plasmic-name={"tilt"}
                    data-plasmic-override={overrides.tilt}
                    className={classNames("__wab_instance", sty.tilt)}
                  >
                    {null}
                  </Tilt>
                ) : null}
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : true
                ) ? (
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__olYtA)}
                    triggerOnce={true}
                  >
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___7IvOv
                        )}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__dgEKh)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("194px" as const)
                              : ("194px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"254px" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"194px" as const}
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/blank_project/images/madison1980SEditedjpg.jpeg",
                                  fullWidth: 4000,
                                  fullHeight: 2670,
                                  aspectRatio: undefined,
                                }
                              : {
                                  src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                  fullWidth: 640,
                                  fullHeight: 480,
                                  aspectRatio: undefined,
                                }
                          }
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__bbLuV)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("194px" as const)
                              : ("194px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"217px" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"194px" as const}
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                  fullWidth: 640,
                                  fullHeight: 480,
                                  aspectRatio: undefined,
                                }
                              : {
                                  src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                                  fullWidth: 1920,
                                  fullHeight: 1080,
                                  aspectRatio: undefined,
                                }
                          }
                        />

                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__jqIhQ)}
                          displayHeight={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? ("194px" as const)
                              : ("194px" as const)
                          }
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"254px" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"194px" as const}
                          src={
                            hasVariant(globalVariants, "screen", "mobileOnly")
                              ? {
                                  src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                                  fullWidth: 1920,
                                  fullHeight: 1080,
                                  aspectRatio: undefined,
                                }
                              : {
                                  src: "/plasmic/blank_project/images/madison2022Jpg.jpeg",
                                  fullWidth: 640,
                                  fullHeight: 480,
                                  aspectRatio: undefined,
                                }
                          }
                        />
                      </div>
                    ) : null}
                  </Reveal>
                ) : null}
              </div>
            </p.Stack>

            {true ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lU4R5)}
                id={"section1" as const}
                itemID={"section1" as const}
              >
                <div className={classNames(projectcss.all, sty.freeBox__nbw0K)}>
                  <Reveal
                    className={classNames("__wab_instance", sty.reveal__nikHg)}
                    triggerOnce={true}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__o2PHu)}
                      displayHeight={"auto" as const}
                      displayMaxHeight={"300px" as const}
                      displayMaxWidth={"300px" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"auto" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/cheese1Png.png",
                        fullWidth: 512,
                        fullHeight: 512,
                        aspectRatio: undefined,
                      }}
                    />
                  </Reveal>
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__tlZ9N)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nEi6K)}
                  >
                    <Reveal
                      className={classNames("__wab_instance", sty.reveal__p5A2)}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__rqGhv
                        )}
                      >
                        {"Best Years of Your Life\n In a Board Game"}
                      </div>
                    </Reveal>

                    <Reveal
                      className={classNames(
                        "__wab_instance",
                        sty.reveal__iko2X
                      )}
                      triggerOnce={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jurjB
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "You liked eating pizza at Ian's and you were there when there was no spot left to study at College Library. \n\nYou and your friends pulled all nighters just to pass that brutal OCHEM final. \n\nNow it's your time to own the place that gave you the memories and have some fun with it."
                          : "You liked eating pizza at Ian's and you were there when there was no spot left to study at College Library. \nYou and your friends pulled all nighters just to pass that brutal OCHEM final. \nNow it's your time to own the place that gave you the memories and have some fun with it."}
                      </div>
                    </Reveal>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__mzong)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__y5X90
                      )}
                      color={"blue" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___27Alq
                        )}
                      >
                        {"Show me"}
                      </div>
                    </Button>

                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__rs85P
                      )}
                      color={"clear" as const}
                      onClick={handleImageClick}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yhm71
                        )}
                      >
                        {"Learn more…"}
                      </div>
                    </Button>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            ) : null}

            <div className={classNames(projectcss.all, sty.freeBox__bgOxB)}>
              <div
                className={classNames(projectcss.all, sty.freeBox__kXTpJ)}
                id={"section2" as const}
                itemID={"section2" as const}
              >
                <ParallaxWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.scrollParallax__hqOX
                  )}
                  speed={20 as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__aNdw)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("384px" as const)
                        : ("877px" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("436px" as const)
                        : ("912px" as const)
                    }
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/gameboxBoardDetailedPhotoRoompng.png",
                      fullWidth: 1000,
                      fullHeight: 772,
                      aspectRatio: undefined,
                    }}
                  />
                </ParallaxWrapper>

                <div
                  data-plasmic-name={"defySection"}
                  data-plasmic-override={overrides.defySection}
                  className={classNames(projectcss.all, sty.defySection)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___0CYc)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___9BwzM
                      )}
                    />
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__cfPgN)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__soFvU
                          )}
                        >
                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__xSfQj
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fhK0
                              )}
                            >
                              {hasVariant(
                                globalVariants,
                                "screen",
                                "mobileOnly"
                              )
                                ? "GameBoard"
                                : "GameBoard"}
                            </div>
                          </ParallaxWrapper>

                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__mSrce
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___2MRkz
                              )}
                            >
                              {"Monopoly"}
                            </div>
                          </ParallaxWrapper>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___9U5Mw
                            )}
                          >
                            {
                              "Classic Monopoly board with your favorite Madison hang-outs and places. \n\nA board that resembles your Tuesday nights, finals week, your freshman year and so more. \n\nNow you can buy and collect rental income from those places you have been in love. First game board ever themed based upon Madison."
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>

                <ParallaxWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.scrollParallax___4WcDo
                  )}
                  speed={20 as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__zkRiR)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"590px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/sampleDeedpng.png",
                      fullWidth: 789,
                      fullHeight: 900,
                      aspectRatio: undefined,
                    }}
                  />
                </ParallaxWrapper>

                <div
                  data-plasmic-name={"riseSection"}
                  data-plasmic-override={overrides.riseSection}
                  className={classNames(projectcss.all, sty.riseSection)}
                >
                  {true ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___4SAv7
                      )}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4EDf
                          )}
                        >
                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__uX9Nj
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__tUhKi
                              )}
                            >
                              {"Local Spots"}
                            </div>
                          </ParallaxWrapper>

                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__cosBv
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8AiZd
                              )}
                            >
                              {"Own Madison"}
                            </div>
                          </ParallaxWrapper>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cJzZy
                            )}
                          >
                            {
                              "You struggled to find a table in College Library during finals week.\n\n How about you owned College Library and charged other players just because being there?"
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__aeOyN)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tzP9V)}
                    />
                  ) : null}
                </div>

                <ParallaxWrapper
                  className={classNames(
                    "__wab_instance",
                    sty.scrollParallax__scCDe
                  )}
                  speed={20 as const}
                >
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img___6Sqeq)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"590px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/dare10Png.png",
                      fullWidth: 1039,
                      fullHeight: 661,
                      aspectRatio: undefined,
                    }}
                  />
                </ParallaxWrapper>

                <div
                  data-plasmic-name={"defySection2"}
                  data-plasmic-override={overrides.defySection2}
                  className={classNames(projectcss.all, sty.defySection2)}
                >
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__tsSHj)}
                    />
                  ) : null}
                  {(
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? true
                      : true
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__s9LUq)}
                    />
                  ) : null}
                  {true ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___3QDb)}
                    >
                      {true ? (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ubP1V
                          )}
                        >
                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__vl5Wr
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__fiaRz
                              )}
                            >
                              {"Bold?"}
                            </div>
                          </ParallaxWrapper>

                          <ParallaxWrapper
                            className={classNames(
                              "__wab_instance",
                              sty.scrollParallax__q7B7U
                            )}
                            speed={20 as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__b9H7B
                              )}
                            >
                              {"play with dare cards"}
                            </div>
                          </ParallaxWrapper>

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__qKhkh
                            )}
                          >
                            {
                              "Dare cards allow you and other players to have an memorable experience. \n\nHowever, it's not everybody's cup of tea. \n\nIt can be a little intimidating for others to perform the courageous tasks in Dare Cards. \n\nSo, it's optional. \n\nHowever if you decide to play with Dare Cards, then other players should keep each other accountable in case someone bails out 🙃."
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  ) : null}
                </div>

                <Button
                  className={classNames("__wab_instance", sty.button__wiEwj)}
                  color={"blue" as const}
                  showEndIcon={true}
                >
                  {"Buy now"}
                </Button>

                {true ? (
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__bo3Vy)}
                    displayHeight={"auto" as const}
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"100%" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"553px" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/change9Png.png",
                      fullWidth: 1039,
                      fullHeight: 661,
                      aspectRatio: undefined,
                    }}
                  />
                ) : null}
                {true ? (
                  <div
                    data-plasmic-name={"riseSection2"}
                    data-plasmic-override={overrides.riseSection2}
                    className={classNames(projectcss.all, sty.riseSection2)}
                  >
                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__o0Usi
                        )}
                      >
                        {true ? (
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__fkJ7X
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gyJa4
                              )}
                            >
                              {"Mail"}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rqORr
                              )}
                            >
                              {""}
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__zmsOj
                              )}
                            >
                              {
                                "The high color fidelity and low compression of ProRes let you record, edit, and deliver broadcast-ready content on the go. Now you can complete a project in ProRes entirely on your iPhone. Or easily bring ProRes videos from your iPhone into Final Cut Pro on your Mac."
                              }
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__kWm3R
                        )}
                      />
                    ) : null}
                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bYqpE
                        )}
                      />
                    ) : null}
                  </div>
                ) : null}
              </div>
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__d67Dh)}>
              {true ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___5CvE5)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ks74H)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__hPsJp)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__h8CKg
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___6Ui7J
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bpf8S
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__pdq3U
                              )}
                            >
                              {
                                '"A sem a velit consequat a torquent posuere nibh consectetur ac sodales mi vulputate imperdiet suspendisse a adipiscing felis convallis est tristique faucibus condimentum ante viverra."'
                              }
                            </div>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bLkZs
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__lRavO)}
                              displayHeight={"64px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"none" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"64px" as const}
                              src={
                                "https://www.caa.com/sites/default/files/styles/headshot_500x500/public/speaker-headshots/Morgan_CAAspeakers_Heashot_Web.jpg?itok=WCOhQ1Hj" as const
                              }
                            />

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__w5O6M
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__jvLxh
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text___0Mbg9
                                  )}
                                >
                                  {"Tracy Jordan"}
                                </div>
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4Hvnd
                                )}
                              >
                                {"Comedian, TGS"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___7KRiE
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__ffPm
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox___7SAvE
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___27M0S
                              )}
                            >
                              {
                                '"Vestibulum lacinia varius habitant dis aenean.'
                              }
                            </div>

                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__bRYoZ
                              )}
                            >
                              {
                                'A parturient non ultricies a parturient leo a nascetur at consectetur turpis praesent mus ornare nulla posuere vel parturient."'
                              }
                            </div>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__yZ22
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img__p7Ma)}
                              displayHeight={"64px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"none" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"64px" as const}
                              src={
                                "https://tv-fanatic-res.cloudinary.com/iu/s--eXCbHIe1--/t_teaser_wide/cs_srgb,f_auto,fl_strip_profile.lossy,q_auto:420/v1371156342/elaine-benes-picture.png" as const
                              }
                            />

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gcqwL
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__z2IA3
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__twMlu
                                  )}
                                >
                                  {"Elaine Benes"}
                                </div>
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ti5SY
                                )}
                              >
                                {"Editor, Pendant Publishing"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___5GVv
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dJs62
                          )}
                        >
                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__inupL
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wWpeo
                              )}
                            >
                              {
                                '"Purus dis a primis rhoncus blandit velit suspendisse porta at ullamcorper suscipit a scelerisque sed pharetra facilisi vitae."'
                              }
                            </div>
                          </p.Stack>

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__q9Nku
                            )}
                          >
                            <p.PlasmicImg
                              alt={""}
                              className={classNames(sty.img___0JyO)}
                              displayHeight={"64px" as const}
                              displayMaxHeight={"none" as const}
                              displayMaxWidth={"none" as const}
                              displayMinHeight={"0" as const}
                              displayMinWidth={"0" as const}
                              displayWidth={"64px" as const}
                              src={
                                "https://static.tvmaze.com/uploads/images/medium_portrait/134/336622.jpg" as const
                              }
                            />

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__kYqks
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__unElM
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__xoed2
                                  )}
                                >
                                  {"Louis Huang"}
                                </div>
                              </div>

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__oGt6T
                                )}
                              >
                                {"Restaurant Owner, Cattleman's Ranch"}
                              </div>
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </div>
                    </p.Stack>
                  </p.Stack>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__ljSDt)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.columns__gWXjH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__zWzi8
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__peqAt
                          )}
                        >
                          <p.PlasmicImg
                            alt={""}
                            className={classNames(sty.img___5SmFh)}
                            displayHeight={"40px" as const}
                            displayMaxHeight={"none" as const}
                            displayMaxWidth={"none" as const}
                            displayMinHeight={"0" as const}
                            displayMinWidth={"0" as const}
                            displayWidth={"40px" as const}
                            src={{
                              src: "/plasmic/blank_project/images/image5.svg",
                              fullWidth: 150,
                              fullHeight: 150,
                              aspectRatio: 1,
                            }}
                          />

                          <p.Stack
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__qtqWn
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__vECwj
                              )}
                            >
                              {"Connect with us"}
                            </div>

                            <p.Stack
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ytBvU
                              )}
                            >
                              <Icon3Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___0MwVx
                                )}
                                role={"img"}
                              />

                              <Icon2Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__gnrk5
                                )}
                                role={"img"}
                              />

                              <Icon28Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___7Ofac
                                )}
                                role={"img"}
                              />
                            </p.Stack>
                          </p.Stack>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__hVd27
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lJZh
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__cvrtS
                            )}
                          >
                            {"Product"}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__ztZ6V
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___3YqT
                              )}
                            >
                              {"Pricing"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__rbPs
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__n1FL
                              )}
                            >
                              {"Log in"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__qg5AV
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__wnwrb
                              )}
                            >
                              {"Integrations"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__wqPHq
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0Dzrm
                              )}
                            >
                              {"Insights"}
                            </div>
                          </Button>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column__arja8
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__skYtR
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__upxcm
                            )}
                          >
                            {"Support"}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__jr9T7
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__s2PqD
                              )}
                            >
                              {"Documentation"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__gawJ5
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lW9C0
                              )}
                            >
                              {"FAQs"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__qytip
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8S3Wx
                              )}
                            >
                              {"Status"}
                            </div>
                          </Button>
                        </p.Stack>
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.column___01KgT
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aPcO
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__vrmyv
                            )}
                          >
                            {"Company"}
                          </div>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button___9PRor
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__cbScc
                              )}
                            >
                              {"About"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__sJntF
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__xkevs
                              )}
                            >
                              {"Contact us"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__kOb0A
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qek1A
                              )}
                            >
                              {"Careers"}
                            </div>
                          </Button>

                          <Button
                            className={classNames(
                              "__wab_instance",
                              sty.button__uEjjB
                            )}
                            color={"clear" as const}
                            size={"minimal" as const}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qFkQh
                              )}
                            >
                              {"Media"}
                            </div>
                          </Button>
                        </p.Stack>
                      </div>
                    </p.Stack>
                  </div>
                </div>
              ) : null}

              <FooterComponent
                data-plasmic-name={"footerComponent"}
                data-plasmic-override={overrides.footerComponent}
                className={classNames("__wab_instance", sty.footerComponent)}
              />
            </div>
          </div>

          {(
            hasVariant(globalVariants, "screen", "mobileOnly") ? true : false
          ) ? (
            <p.PlasmicImg
              alt={""}
              className={classNames(sty.img__mm8Ow)}
              displayHeight={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("194px" as const)
                  : ("194px" as const)
              }
              displayMaxHeight={"none" as const}
              displayMaxWidth={"217px" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"194px" as const}
              src={{
                src: "/plasmic/blank_project/images/madisonFuturejpg.jpeg",
                fullWidth: 1920,
                fullHeight: 1080,
                aspectRatio: undefined,
              }}
            />
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "aboutUs",
    "gameRules",
    "faq",
    "aboutUs2",
    "gameRules2",
    "faq2",
    "headerMadisonopoly",
    "navigationBar",
    "tilt",
    "defySection",
    "riseSection",
    "defySection2",
    "riseSection2",
    "footerComponent",
  ],
  aboutUs: ["aboutUs"],
  gameRules: ["gameRules"],
  faq: ["faq"],
  aboutUs2: ["aboutUs2"],
  gameRules2: ["gameRules2"],
  faq2: ["faq2"],
  headerMadisonopoly: ["headerMadisonopoly"],
  navigationBar: ["navigationBar"],
  tilt: ["tilt"],
  defySection: ["defySection"],
  riseSection: ["riseSection"],
  defySection2: ["defySection2"],
  riseSection2: ["riseSection2"],
  footerComponent: ["footerComponent"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  aboutUs: "a";
  gameRules: "a";
  faq: "a";
  aboutUs2: "a";
  gameRules2: "a";
  faq2: "a";
  headerMadisonopoly: typeof HeaderMadisonopoly;
  navigationBar: typeof NavigationBar;
  tilt: typeof Tilt;
  defySection: "div";
  riseSection: "div";
  defySection2: "div";
  riseSection2: "div";
  footerComponent: typeof FooterComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage__VariantsArgs;
    args?: PlasmicNewPage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNewPage__ArgProps,
      internalVariantPropNames: PlasmicNewPage__VariantProps,
    });

    return PlasmicNewPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNewPage";
  } else {
    func.displayName = `PlasmicNewPage.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage = Object.assign(
  // Top-level PlasmicNewPage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    aboutUs: makeNodeComponent("aboutUs"),
    gameRules: makeNodeComponent("gameRules"),
    faq: makeNodeComponent("faq"),
    aboutUs2: makeNodeComponent("aboutUs2"),
    gameRules2: makeNodeComponent("gameRules2"),
    faq2: makeNodeComponent("faq2"),
    headerMadisonopoly: makeNodeComponent("headerMadisonopoly"),
    navigationBar: makeNodeComponent("navigationBar"),
    tilt: makeNodeComponent("tilt"),
    defySection: makeNodeComponent("defySection"),
    riseSection: makeNodeComponent("riseSection"),
    defySection2: makeNodeComponent("defySection2"),
    riseSection2: makeNodeComponent("riseSection2"),
    footerComponent: makeNodeComponent("footerComponent"),

    // Metadata about props expected for PlasmicNewPage
    internalVariantProps: PlasmicNewPage__VariantProps,
    internalArgProps: PlasmicNewPage__ArgProps,
  }
);

export default PlasmicNewPage;
/* prettier-ignore-end */
