// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wA73ZswqroE6r1m1xaxGJ1
// Component: haFz3bwJAR
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MadisonopolyHeaderFinal from "../../MadisonopolyHeaderFinal"; // plasmic-import: zLYGck-fye5/component
import FooterComponent from "../../FooterComponent"; // plasmic-import: Mfi3gMBJIGb/component

import { useScreenVariants as useScreenVariantsabUxTrbG0Cf5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AbUXTrbG0Cf5V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wA73ZswqroE6r1m1xaxGJ1/projectcss
import sty from "./PlasmicAboutUs.module.css"; // plasmic-import: haFz3bwJAR/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 7E0GT9i-81-/icon
import _2561381SearchIconsvgIcon from "./icons/PlasmicIcon___2561381SearchIconsvg"; // plasmic-import: v71hmEBDdT6/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 980jwjq2w1h/icon
import ShoppingBag3049SvgIcon from "./icons/PlasmicIcon__ShoppingBag3049Svg"; // plasmic-import: HJOBcAy0ipl/icon

export type PlasmicAboutUs__VariantMembers = {};

export type PlasmicAboutUs__VariantsArgs = {};
type VariantPropType = keyof PlasmicAboutUs__VariantsArgs;
export const PlasmicAboutUs__VariantProps = new Array<VariantPropType>();

export type PlasmicAboutUs__ArgsType = {};
type ArgPropType = keyof PlasmicAboutUs__ArgsType;
export const PlasmicAboutUs__ArgProps = new Array<ArgPropType>();

export type PlasmicAboutUs__OverridesType = {
  root?: p.Flex<"div">;
  madisonopolyHeaderFinal?: p.Flex<typeof MadisonopolyHeaderFinal>;
  footerComponent?: p.Flex<typeof FooterComponent>;
};

export interface DefaultAboutUsProps {}

function PlasmicAboutUs__RenderFunc(props: {
  variants: PlasmicAboutUs__VariantsArgs;
  args: PlasmicAboutUs__ArgsType;
  overrides: PlasmicAboutUs__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsabUxTrbG0Cf5V()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__w5I9U)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__aKxon)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__s77Zb)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tOe3
                    )}
                  >
                    {"Get 55% off Lorem Ipsum enough lorem discount"}
                  </div>
                </p.Stack>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uaz8P)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__q2X1V
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__bc1IO
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__znOeX)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__sJue9
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__sqNqw)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
          ) : null}
          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__j7JIo)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__r5Loo)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fpSWo)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__aGCj
                    )}
                  >
                    {"Logo"}
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__siyMd)}
                  >
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__n9Pnp
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__xUmzG)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___180Y0
                        )}
                      >
                        {"shop"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___51HeQ
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__dDrtP
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__chBYa)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ovbmt
                        )}
                      >
                        {"The Academy"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__wR3Cs)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__fovHk
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__yS7HP)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__lhFgu
                        )}
                      >
                        {"About"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__hgBoy)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__rVva
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__v2B2M)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__upMh4
                        )}
                      >
                        {"Help"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___2Ox9S
                          )}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__fSnVm)}
                  >
                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__twRj
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__cycft)}
                          role={"img"}
                        />
                      ) : null}

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__aGocN
                        )}
                      >
                        <_2561381SearchIconsvgIcon
                          className={classNames(
                            projectcss.all,
                            sty.svg___4Mcnq
                          )}
                          role={"img"}
                        />

                        <Icon2Icon
                          className={classNames(projectcss.all, sty.svg__epEcX)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8SrkS
                          )}
                        >
                          <ShoppingBag3049SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__nmoG
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__bNscj
                            )}
                          />
                        </div>
                      </p.Stack>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__ktxhL)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </p.Stack>

                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__gAlLu)}
                    >
                      <button
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button__j1Vfh
                        )}
                      >
                        {"Sign up"}
                      </button>

                      <p.Stack
                        as={p.PlasmicLink}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          sty.link__vasmg
                        )}
                        component={Link}
                        platform={"nextjs"}
                      >
                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__jhPNg
                            )}
                            role={"img"}
                          />
                        ) : null}

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__eczb3
                          )}
                        >
                          {"Log in"}
                        </div>

                        {false ? (
                          <Icon4Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg__rQNr
                            )}
                            role={"img"}
                          />
                        ) : null}
                      </p.Stack>
                    </div>
                  ) : null}
                </p.Stack>
              </p.Stack>
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__jVdM5)}>
            <MadisonopolyHeaderFinal
              data-plasmic-name={"madisonopolyHeaderFinal"}
              data-plasmic-override={overrides.madisonopolyHeaderFinal}
              className={classNames(
                "__wab_instance",
                sty.madisonopolyHeaderFinal
              )}
            />

            <div className={classNames(projectcss.all, sty.freeBox__me0Tk)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___5BhYa)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nOw5Z)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___9W9Eb
                    )}
                  >
                    {"About Us"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__hl0Q
                    )}
                  >
                    {"Who are we and why did we make this game?"}
                  </div>
                </p.Stack>
              </p.Stack>

              <div className={classNames(projectcss.all, sty.columns__utz62)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__b3SgA)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___1TvNf
                    )}
                  >
                    {"Made by the Class of 2020"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vQd2I
                    )}
                  >
                    {
                      "Representing Class of 2020, the first \"Zoom University\" Graduates. We didn't realize the beauty and uniqueness of our Madison experience until our late graduation in 2021. \n\nThe memorable experiences in Langdon Street during Rush Week, the sleepless nights we had in finals week, that 2 AM Mac N Cheese slice at Ian's Pizza on Franklin, or bumping into Tunnel Bob out of nowhere... \n\nIt was all there until we wore that red striped gown. As a token of our appreciation and keeping our memories in front of our eyes and most importantly having fun doing all that, we have created the one and only Madisonopoly."
                    }
                  </div>
                </p.Stack>

                <div className={classNames(projectcss.all, sty.column__t5JV1)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__vbT7C)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("302px" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("100%" as const)
                        : ("1000px" as const)
                    }
                    displayMinHeight={"0" as const}
                    displayMinWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("424px" as const)
                        : ("0" as const)
                    }
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/bascomHalljpg.jpeg",
                      fullWidth: 1024,
                      fullHeight: 678,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>

          <div className={classNames(projectcss.all, sty.freeBox__jmXlZ)}>
            <div className={classNames(projectcss.all, sty.freeBox__opIbN)}>
              <div className={classNames(projectcss.all, sty.columns__icR06)}>
                <div className={classNames(projectcss.all, sty.column___5CDlq)}>
                  <p.PlasmicImg
                    alt={""}
                    className={classNames(sty.img__m1PNz)}
                    displayHeight={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? ("292px" as const)
                        : ("100%" as const)
                    }
                    displayMaxHeight={"none" as const}
                    displayMaxWidth={"none" as const}
                    displayMinHeight={"0" as const}
                    displayMinWidth={"0" as const}
                    displayWidth={"100%" as const}
                    loading={"lazy" as const}
                    src={{
                      src: "/plasmic/blank_project/images/_6539826Jpg.jpeg",
                      fullWidth: 1920,
                      fullHeight: 1178,
                      aspectRatio: undefined
                    }}
                  />
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__hxhNc)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2__rZ6Te
                    )}
                  >
                    {"Token of Madison Experience"}
                  </h2>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__wt1Iq
                    )}
                  >
                    {
                      "Why a board game then? Because a board game brings people together, helps us create bonds and spend quality time. A simple t-shirt or coffee mug won't do that. \n\nAnd you shouldn't spend time trying to understand what rules you have to know or what complications there are.  It should be simple enough to play with Ohio State fans.\nIt should also have a unique design which should remind you of your past, and help you proudly boost what it means to be a Badger."
                    }
                  </div>
                </p.Stack>
              </div>
            </div>
          </div>

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__e6K2K)}>
              <div className={classNames(projectcss.all, sty.freeBox___6B1N1)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__nyZzX)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sZidP)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__hjNld
                      )}
                    >
                      {"The journey"}
                    </h2>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rxEvo)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__iHwXe
                        )}
                      >
                        {
                          "It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters,\n\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters,It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters,\n\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters,"
                        }
                      </div>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__iZeTk)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__lrsv7)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___41ZE2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__eW4BV)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__ja27L
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Lorem founders"
                        : "Made for the Students by the Students "}
                    </h2>
                  </div>
                </p.Stack>

                {true ? (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__m6Acd)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ztRzg)}
                      displayHeight={"100%" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"100%" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/blank_project/images/class2020CrsBr212794600X400Jpeg.jpeg",
                        fullWidth: 600,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  </p.Stack>
                ) : null}
              </p.Stack>
            </p.Stack>
          ) : null}

          <FooterComponent
            data-plasmic-name={"footerComponent"}
            data-plasmic-override={overrides.footerComponent}
            className={classNames("__wab_instance", sty.footerComponent)}
          />
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "madisonopolyHeaderFinal", "footerComponent"],
  madisonopolyHeaderFinal: ["madisonopolyHeaderFinal"],
  footerComponent: ["footerComponent"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  madisonopolyHeaderFinal: typeof MadisonopolyHeaderFinal;
  footerComponent: typeof FooterComponent;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicAboutUs__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicAboutUs__VariantsArgs;
    args?: PlasmicAboutUs__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicAboutUs__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicAboutUs__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAboutUs__ArgProps,
          internalVariantPropNames: PlasmicAboutUs__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAboutUs__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutUs";
  } else {
    func.displayName = `PlasmicAboutUs.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutUs = Object.assign(
  // Top-level PlasmicAboutUs renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    madisonopolyHeaderFinal: makeNodeComponent("madisonopolyHeaderFinal"),
    footerComponent: makeNodeComponent("footerComponent"),

    // Metadata about props expected for PlasmicAboutUs
    internalVariantProps: PlasmicAboutUs__VariantProps,
    internalArgProps: PlasmicAboutUs__ArgProps
  }
);

export default PlasmicAboutUs;
/* prettier-ignore-end */
