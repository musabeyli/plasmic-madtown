// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wA73ZswqroE6r1m1xaxGJ1
// Component: PHanRkgJet7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput from "../../TextInput"; // plasmic-import: toxCWvQnbr8/component
import Button from "../../Button"; // plasmic-import: aOTvFzJBlc_/component

import { useScreenVariants as useScreenVariantsabUxTrbG0Cf5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AbUXTrbG0Cf5V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wA73ZswqroE6r1m1xaxGJ1/projectcss
import sty from "./PlasmicMadisonopolyFooter.module.css"; // plasmic-import: PHanRkgJet7/css

import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: Qv8wUtGF3tq/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Tri1W4mor9t/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: M7J874mTSvr/icon
import SearchsvgIcon from "./icons/PlasmicIcon__Searchsvg"; // plasmic-import: 5-AnjIZOS54/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 7E0GT9i-81-/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: q8bdo62baej/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 980jwjq2w1h/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: _UA6I6vZTD-/icon

export type PlasmicMadisonopolyFooter__VariantMembers = {};

export type PlasmicMadisonopolyFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicMadisonopolyFooter__VariantsArgs;
export const PlasmicMadisonopolyFooter__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMadisonopolyFooter__ArgsType = {};
type ArgPropType = keyof PlasmicMadisonopolyFooter__ArgsType;
export const PlasmicMadisonopolyFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicMadisonopolyFooter__OverridesType = {
  root?: p.Flex<"div">;
  _2?: p.Flex<"a"> & Partial<LinkProps>;
  textInput?: p.Flex<typeof TextInput>;
  httpsstudioplasmicapp?: p.Flex<"a"> & Partial<LinkProps>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultMadisonopolyFooterProps {
  className?: string;
}

function PlasmicMadisonopolyFooter__RenderFunc(props: {
  variants: PlasmicMadisonopolyFooter__VariantsArgs;
  args: PlasmicMadisonopolyFooter__ArgsType;
  overrides: PlasmicMadisonopolyFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsabUxTrbG0Cf5V()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__twjmC)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__adp)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__oOx02)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gyIsV
              )}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "Contact us\n"
                : "Contact us\n"}
            </div>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__tddE3
              )}
              component={Link}
              platform={"nextjs"}
            >
              {hasVariant(globalVariants, "screen", "mobileOnly")
                ? "(555) 555-5555"
                : "(555) 555-5555"}
            </p.PlasmicLink>

            <p.PlasmicLink
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___0Pnnp
              )}
              component={Link}
              platform={"nextjs"}
            >
              {"support@example.com"}
            </p.PlasmicLink>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__uJn7M)}
        >
          <p.PlasmicLink
            data-plasmic-name={"_2"}
            data-plasmic-override={overrides._2}
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty._2
            )}
            component={Link}
            href={
              hasVariant(globalVariants, "screen", "mobileOnly")
                ? ("#" as const)
                : undefined
            }
            platform={"nextjs"}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Shop"
              : "Shop"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__mFcHl
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"The Academy"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link__gcnra
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"About"}
          </p.PlasmicLink>

          <p.PlasmicLink
            className={classNames(
              projectcss.all,
              projectcss.a,
              projectcss.__wab_text,
              sty.link___7JId1
            )}
            component={Link}
            platform={"nextjs"}
          >
            {"Help"}
          </p.PlasmicLink>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1SKkL)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__emKz
            )}
          >
            {hasVariant(globalVariants, "screen", "mobileOnly")
              ? "Email newsletter"
              : "Email newsletter"}
          </div>

          <div className={classNames(projectcss.all, sty.freeBox___5PBuv)}>
            <TextInput
              data-plasmic-name={"textInput"}
              data-plasmic-override={overrides.textInput}
              className={classNames("__wab_instance", sty.textInput)}
              endIcon={
                <Button
                  className={classNames("__wab_instance", sty.button__inYpq)}
                >
                  <AngleRightsvgIcon
                    className={classNames(projectcss.all, sty.svg__xjyV)}
                    role={"img"}
                  />
                </Button>
              }
              placeholder={"E-mail" as const}
              showEndIcon={true}
            />
          </div>
        </p.Stack>

        {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : true) ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nji8Q)}
          >
            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__ilNpI
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg__ngOZf)}
                  role={"img"}
                />
              ) : null}

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__gcZ3F)}
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon3Icon
                      : Icon3Icon
                  }
                  className={classNames(projectcss.all, sty.svg__zbKqc)}
                  role={"img"}
                />

                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__v2RH8)}
                  role={"img"}
                />

                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? Icon28Icon
                      : Icon28Icon
                  }
                  className={classNames(projectcss.all, sty.svg__b0EVn)}
                  role={"img"}
                />
              </p.Stack>

              {false ? (
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg__aijT1)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </p.Stack>
        ) : null}
        {false ? (
          <div className={classNames(projectcss.all, sty.freeBox__xvKa7)}>
            <button
              className={classNames(
                projectcss.all,
                projectcss.button,
                projectcss.__wab_text,
                sty.button__fjref
              )}
            >
              {"Sign up"}
            </button>

            <p.Stack
              as={p.PlasmicLink}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link___0E9Y
              )}
              component={Link}
              platform={"nextjs"}
            >
              {false ? (
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg___1Srp)}
                  role={"img"}
                />
              ) : null}

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sZpsd
                )}
              >
                {"Log in"}
              </div>

              {false ? (
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg___3Ce1I)}
                  role={"img"}
                />
              ) : null}
            </p.Stack>
          </div>
        ) : null}
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__wxrqB)}>
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___89UzI)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ctsFf)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__zou7L)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__aou1S
                )}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? "(c) Company. All rights reserved. This site proudly built with"
                  : "© Company. All rights reserved. This site proudly built with"}
              </div>

              <p.PlasmicLink
                data-plasmic-name={"httpsstudioplasmicapp"}
                data-plasmic-override={overrides.httpsstudioplasmicapp}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.httpsstudioplasmicapp
                )}
                component={Link}
                platform={"nextjs"}
              >
                {hasVariant(globalVariants, "screen", "mobileOnly")
                  ? " Plasmic"
                  : " Plasmic"}
              </p.PlasmicLink>
            </div>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__dvkh6)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ocEuz)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___46Ezg)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__zYjoq)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link___0Owy
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__utRd)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__sdqPl
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "shop"
                        : "Shipping & Returns"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__hkxrd)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__bybAt
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___8VnDj)}
                        role={"img"}
                      />
                    ) : null}
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__j3Tf)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yv83V
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Privacy policy"
                        : "Privacy policy"}
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__neVmQ
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___9YQsf)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xOeWg
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Terms & Conditions"
                        : "Terms & Conditions"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__n8N8A)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </p.Stack>
          </p.Stack>
        </p.Stack>
      </div>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "_2", "textInput", "textbox", "httpsstudioplasmicapp"],
  _2: ["_2"],
  textInput: ["textInput", "textbox"],
  httpsstudioplasmicapp: ["httpsstudioplasmicapp"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  _2: "a";
  textInput: typeof TextInput;
  httpsstudioplasmicapp: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMadisonopolyFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMadisonopolyFooter__VariantsArgs;
    args?: PlasmicMadisonopolyFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMadisonopolyFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMadisonopolyFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMadisonopolyFooter__ArgProps,
      internalVariantPropNames: PlasmicMadisonopolyFooter__VariantProps
    });

    return PlasmicMadisonopolyFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMadisonopolyFooter";
  } else {
    func.displayName = `PlasmicMadisonopolyFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicMadisonopolyFooter = Object.assign(
  // Top-level PlasmicMadisonopolyFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    _2: makeNodeComponent("_2"),
    textInput: makeNodeComponent("textInput"),
    httpsstudioplasmicapp: makeNodeComponent("httpsstudioplasmicapp"),

    // Metadata about props expected for PlasmicMadisonopolyFooter
    internalVariantProps: PlasmicMadisonopolyFooter__VariantProps,
    internalArgProps: PlasmicMadisonopolyFooter__ArgProps
  }
);

export default PlasmicMadisonopolyFooter;
/* prettier-ignore-end */
