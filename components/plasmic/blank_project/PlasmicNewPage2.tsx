// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: wA73ZswqroE6r1m1xaxGJ1
// Component: JJTNU5FQV5
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button3 from "../../Button3"; // plasmic-import: NFUIEe259ppi/component
import TextInput from "../../TextInput"; // plasmic-import: toxCWvQnbr8/component
import Button from "../../Button"; // plasmic-import: aOTvFzJBlc_/component

import { useScreenVariants as useScreenVariantsabUxTrbG0Cf5V } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: AbUXTrbG0Cf5V/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: wA73ZswqroE6r1m1xaxGJ1/projectcss
import sty from "./PlasmicNewPage2.module.css"; // plasmic-import: JJTNU5FQV5/css

import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: 7E0GT9i-81-/icon
import _2561381SearchIconsvgIcon from "./icons/PlasmicIcon___2561381SearchIconsvg"; // plasmic-import: v71hmEBDdT6/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: 980jwjq2w1h/icon
import ShoppingBag3049SvgIcon from "./icons/PlasmicIcon__ShoppingBag3049Svg"; // plasmic-import: HJOBcAy0ipl/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: nceHTD7ONKMo/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: wDgubAuEcrqo/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: XM19si9i5rlG/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: LL5WLkjuMkUt/icon
import AngleRightsvgIcon from "./icons/PlasmicIcon__AngleRightsvg"; // plasmic-import: Qv8wUtGF3tq/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: q8bdo62baej/icon
import Icon28Icon from "./icons/PlasmicIcon__Icon28"; // plasmic-import: _UA6I6vZTD-/icon

export type PlasmicNewPage2__VariantMembers = {};

export type PlasmicNewPage2__VariantsArgs = {};
type VariantPropType = keyof PlasmicNewPage2__VariantsArgs;
export const PlasmicNewPage2__VariantProps = new Array<VariantPropType>();

export type PlasmicNewPage2__ArgsType = {};
type ArgPropType = keyof PlasmicNewPage2__ArgsType;
export const PlasmicNewPage2__ArgProps = new Array<ArgPropType>();

export type PlasmicNewPage2__OverridesType = {
  single?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  button3?: p.Flex<typeof Button3>;
  textInput?: p.Flex<typeof TextInput>;
  textbox?: p.Flex<typeof TextInput>;
};

export interface DefaultNewPage2Props {}

function PlasmicNewPage2__RenderFunc(props: {
  variants: PlasmicNewPage2__VariantsArgs;
  args: PlasmicNewPage2__ArgsType;
  overrides: PlasmicNewPage2__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsabUxTrbG0Cf5V()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"single"}
          data-plasmic-override={overrides.single}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            sty.single
          )}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__nyrqI)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tNv1)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___9X18T)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nxlRc
                  )}
                >
                  {"Get 55% off Lorem Ipsum enough lorem discount"}
                </div>
              </p.Stack>

              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__kzpAj)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__xCyLr
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__gtAk
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__iabla)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6E4Iu
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__gdcat)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>
          </p.Stack>

          <div className={classNames(projectcss.all, sty.freeBox__y9R5S)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__y5XjD)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__p1GLf)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ajAv
                  )}
                >
                  {"Logo"}
                </div>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__t99Hs)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__uaNaN
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__p313U)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4Fl7E
                      )}
                    >
                      {"shop"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__su5S)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__nNfqq
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__qe4Av)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ujhYu
                      )}
                    >
                      {"The Academy"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__gH97)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__qhFdp
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__bdXeQ)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vYUdk
                      )}
                    >
                      {"About"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__sLval)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__dgIzw
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__ay0Kt)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__mzHuM
                      )}
                    >
                      {"Help"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___9RzE)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__t8XnA)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__u9IUf
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__eYWwq)}
                        role={"img"}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wZpbQ)}
                    >
                      <_2561381SearchIconsvgIcon
                        className={classNames(projectcss.all, sty.svg__y00Io)}
                        role={"img"}
                      />

                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__vzcBz)}
                        role={"img"}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gFAcH
                        )}
                      >
                        <ShoppingBag3049SvgIcon
                          className={classNames(projectcss.all, sty.svg___8GXe)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__uxd4R
                          )}
                        />
                      </div>
                    </p.Stack>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__iWbWe)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>

                {false ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox__qvzyG)}
                  >
                    <button
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        projectcss.__wab_text,
                        sty.button__u6ER4
                      )}
                    >
                      {"Sign up"}
                    </button>

                    <p.Stack
                      as={p.PlasmicLink}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        sty.link__q1W0O
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__hYtXg)}
                          role={"img"}
                        />
                      ) : null}

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jgjIw
                        )}
                      >
                        {"Log in"}
                      </div>

                      {false ? (
                        <Icon4Icon
                          className={classNames(projectcss.all, sty.svg__dEwKh)}
                          role={"img"}
                        />
                      ) : null}
                    </p.Stack>
                  </div>
                ) : null}
              </p.Stack>
            </p.Stack>
          </div>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vT4FC)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__psBbC)}>
                <div
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <div
                    className={classNames(projectcss.all, sty.column__vdA0X)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bj506)}
                    >
                      <p.PlasmicImg
                        data-plasmic-name={"img"}
                        data-plasmic-override={overrides.img}
                        alt={""}
                        className={classNames(sty.img)}
                        displayHeight={"auto" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"100%" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"auto" as const}
                        loading={"lazy" as const}
                        src={{
                          src: "/plasmic/blank_project/images/gameboxBoardDetailedpng.png",
                          fullWidth: 4000,
                          fullHeight: 3091,
                          aspectRatio: undefined
                        }}
                      />
                    </div>
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__k2Fu)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        sty.h2__y9Sd8
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox___0SDm
                        )}
                      />
                    </h2>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__eq9Jx)}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__zzk1Z)}
                    />

                    {(
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? true
                        : true
                    ) ? (
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__fMtwz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__iy0Hx
                          )}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__tmu08
                          )}
                        >
                          <Button3
                            data-plasmic-name={"button3"}
                            data-plasmic-override={overrides.button3}
                            className={classNames(
                              "__wab_instance",
                              sty.button3
                            )}
                            color={undefined}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__ddRDr
                              )}
                            >
                              {"Add to cart"}
                            </div>
                          </Button3>
                        </div>
                      </p.Stack>
                    ) : null}
                  </p.Stack>
                </div>
              </div>
            </p.Stack>
          ) : null}

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__xaob)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__ePYcS)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sz1MA)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___2WsMv)}
                >
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___3KffF
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "100% Arabica and beyond"
                      : "100% Arabica and beyond"}
                  </h2>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__sWqXb)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__rozRn)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__weUxI)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__wZDsI)}
                    >
                      <Icon7Icon
                        className={classNames(projectcss.all, sty.svg___7D1Bl)}
                        role={"img"}
                      />
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__xsEVk
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vxTdG
                          )}
                        >
                          {"Direct sourcing"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__kihwR)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__vK6Zt)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Qwv6
                      )}
                    >
                      <Icon8Icon
                        className={classNames(projectcss.all, sty.svg__vhVcx)}
                        role={"img"}
                      />
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mmCuw
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1La0J
                          )}
                        >
                          {"Organic farming practices"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__rcrir)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oMmcu)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__edWxg)}
                    >
                      <Icon9Icon
                        className={classNames(projectcss.all, sty.svg__reMx)}
                        role={"img"}
                      />
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__atcpg
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ttXkY
                          )}
                        >
                          {"Biodegradable packaging"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__aHbzg)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__nldbc)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nEt6F)}
                    >
                      <Icon10Icon
                        className={classNames(projectcss.all, sty.svg__aPZdt)}
                        role={"img"}
                      />
                    </div>

                    {true ? (
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__cZExd
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__bg665
                          )}
                        >
                          {"Enjoyment guarantee"}
                        </div>
                      </div>
                    ) : null}
                  </p.Stack>
                </div>
              </p.Stack>
            </p.Stack>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__aihfO)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__tmy4X)}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__vZj0)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___79Dzh)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___7Doka
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Contact us\n"
                      : "Contact us\n"}
                  </div>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___7LfEj
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "(555) 555-5555"
                      : "(555) 555-5555"}
                  </p.PlasmicLink>

                  <p.PlasmicLink
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___5BqTj
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {"support@example.com"}
                  </p.PlasmicLink>
                </div>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__jhHgs)}
              >
                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__r9ZlI
                  )}
                  component={Link}
                  href={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? ("#" as const)
                      : undefined
                  }
                  platform={"nextjs"}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Shop"
                    : "Shop"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___1Fa49
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"The Academy"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__mYxU8
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"About"}
                </p.PlasmicLink>

                <p.PlasmicLink
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__kFkMs
                  )}
                  component={Link}
                  platform={"nextjs"}
                >
                  {"Help"}
                </p.PlasmicLink>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___7Mcuu)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__njp5G
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Email newsletter"
                    : "Email newsletter"}
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__nf7Jn)}>
                  <TextInput
                    data-plasmic-name={"textInput"}
                    data-plasmic-override={overrides.textInput}
                    className={classNames("__wab_instance", sty.textInput)}
                    endIcon={
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__c8I1R
                        )}
                      >
                        <AngleRightsvgIcon
                          className={classNames(projectcss.all, sty.svg__ruaGz)}
                          role={"img"}
                        />
                      </Button>
                    }
                    placeholder={"E-mail" as const}
                    showEndIcon={true}
                  />
                </div>
              </p.Stack>

              {(
                hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
              ) ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ddnEg)}
                >
                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__lRa0O
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg___8RFw)}
                        role={"img"}
                      />
                    ) : null}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__aUvr)}
                    >
                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon3Icon
                            : Icon3Icon
                        }
                        className={classNames(projectcss.all, sty.svg__ds6Ub)}
                        role={"img"}
                      />

                      <Icon2Icon
                        className={classNames(projectcss.all, sty.svg__caXrD)}
                        role={"img"}
                      />

                      <p.PlasmicIcon
                        PlasmicIconType={
                          hasVariant(globalVariants, "screen", "mobileOnly")
                            ? Icon28Icon
                            : Icon28Icon
                        }
                        className={classNames(projectcss.all, sty.svg__a6Kh1)}
                        role={"img"}
                      />
                    </p.Stack>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__u6OlJ)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </p.Stack>
              ) : null}
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__khKhi)}>
                  <button
                    className={classNames(
                      projectcss.all,
                      projectcss.button,
                      projectcss.__wab_text,
                      sty.button__tfey4
                    )}
                  >
                    {"Sign up"}
                  </button>

                  <p.Stack
                    as={p.PlasmicLink}
                    hasGap={true}
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      sty.link__jOuq5
                    )}
                    component={Link}
                    platform={"nextjs"}
                  >
                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__wh3Yn)}
                        role={"img"}
                      />
                    ) : null}

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__a2ArM
                      )}
                    >
                      {"Log in"}
                    </div>

                    {false ? (
                      <Icon4Icon
                        className={classNames(projectcss.all, sty.svg__mu3La)}
                        role={"img"}
                      />
                    ) : null}
                  </p.Stack>
                </div>
              ) : null}
            </p.Stack>

            <div className={classNames(projectcss.all, sty.freeBox__w3Dtr)}>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__p0Htv)}
              >
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9SQ2P)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__vmhvr)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__gdEe
                      )}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "(c) Company. All rights reserved. This site proudly built with"
                        : "© Company. All rights reserved. This site proudly built with"}
                    </div>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__yVsEk
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly")
                        ? " Plasmic"
                        : " Plasmic"}
                    </p.PlasmicLink>
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___9JpI)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__n8Ny4)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__q4CO)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__rrYu0
                        )}
                      >
                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__f7MmL
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__mJdPu
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___8Wuhj
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "shop"
                              : "Shipping & Returns"}
                          </div>

                          {false ? (
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__i9S3S
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>

                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__gTs
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hbI3R
                              )}
                              role={"img"}
                            />
                          ) : null}
                          {false ? (
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__h5Uba
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___75QIe
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Privacy policy"
                              : "Privacy policy"}
                          </div>
                        </p.Stack>

                        <p.Stack
                          as={p.PlasmicLink}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__bRqUw
                          )}
                          component={Link}
                          platform={"nextjs"}
                        >
                          {false ? (
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__k87Yg
                              )}
                              role={"img"}
                            />
                          ) : null}

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__shhj
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobileOnly")
                              ? "Terms & Conditions"
                              : "Terms & Conditions"}
                          </div>

                          {false ? (
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__f1Vbw
                              )}
                              role={"img"}
                            />
                          ) : null}
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            </div>
          </p.Stack>
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  single: ["single", "columns", "img", "button3", "textInput", "textbox"],
  columns: ["columns", "img", "button3"],
  img: ["img"],
  button3: ["button3"],
  textInput: ["textInput", "textbox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  single: "div";
  columns: "div";
  img: typeof p.PlasmicImg;
  button3: typeof Button3;
  textInput: typeof TextInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNewPage2__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNewPage2__VariantsArgs;
    args?: PlasmicNewPage2__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNewPage2__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNewPage2__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNewPage2__ArgProps,
          internalVariantPropNames: PlasmicNewPage2__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNewPage2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "single") {
    func.displayName = "PlasmicNewPage2";
  } else {
    func.displayName = `PlasmicNewPage2.${nodeName}`;
  }
  return func;
}

export const PlasmicNewPage2 = Object.assign(
  // Top-level PlasmicNewPage2 renders the root element
  makeNodeComponent("single"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    img: makeNodeComponent("img"),
    button3: makeNodeComponent("button3"),
    textInput: makeNodeComponent("textInput"),

    // Metadata about props expected for PlasmicNewPage2
    internalVariantProps: PlasmicNewPage2__VariantProps,
    internalArgProps: PlasmicNewPage2__ArgProps
  }
);

export default PlasmicNewPage2;
/* prettier-ignore-end */
